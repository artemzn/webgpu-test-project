/**
 * Sprint 2.1 Integration Tests: WebGPU —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π Sprint 2.1
 */

import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import { GridRenderer } from '../../src/rendering/GridRenderer.js';
import { RenderManager } from '../../src/rendering/webgpu-setup/RenderManager.js';
import { RenderPipelineBuilder } from '../../src/rendering/webgpu-setup/RenderPipelineBuilder.js';
import type { WebGPUConfig, Cell, Viewport } from '../../src/types/index.js';

describe('Sprint 2.1: WebGPU —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥', () => {
  let mockConfig: WebGPUConfig;
  let mockCanvas: HTMLCanvasElement;
  let mockDevice: GPUDevice;
  let mockContext: GPUCanvasContext;

  beforeEach(() => {
    // –°–æ–∑–¥–∞–µ–º mock WebGPU –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    mockDevice = {
      createShaderModule: () => ({ label: 'Mock Shader' }),
      createRenderPipeline: () => ({ getBindGroupLayout: () => ({}) }),
      createBuffer: () => ({
        destroy: () => {},
        getMappedRange: () => new ArrayBuffer(64),
        unmap: () => {},
      }),
      createBindGroupLayout: () => ({}),
      createBindGroup: () => ({}),
      createPipelineLayout: () => ({}),
      createCommandEncoder: () => ({
        beginRenderPass: () => ({
          setPipeline: () => {},
          setBindGroup: () => {},
          setVertexBuffer: () => {},
          draw: vi.fn(),
          end: () => {},
        }),
        finish: () => ({}),
      }),
      queue: { writeBuffer: () => {}, submit: () => {} },
    } as any;

    mockContext = {
      configure: () => {},
      getCurrentTexture: () => ({
        createView: () => ({}),
      }),
    } as any;

    mockConfig = {
      device: mockDevice,
      context: mockContext,
      format: 'bgra8unorm' as GPUTextureFormat,
    };

    mockCanvas = {
      width: 800,
      height: 600,
      getContext: () => mockContext,
      parentElement: {
        getBoundingClientRect: () => ({ width: 800, height: 600 }),
      },
    } as any;
  });

  describe('‚úÖ –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: –°–æ–∑–¥–∞—Ç—å GridRenderer –∫–ª–∞—Å—Å', () => {
    it('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä GridRenderer', () => {
      const gridRenderer = new GridRenderer(mockConfig, mockCanvas, 80, 25);
      expect(gridRenderer).toBeDefined();
      expect(gridRenderer).toBeInstanceOf(GridRenderer);
    });

    it('–¥–æ–ª–∂–µ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫', async () => {
      const gridRenderer = new GridRenderer(mockConfig, mockCanvas, 80, 25);
      await expect(gridRenderer.initialize()).resolves.not.toThrow();
    });

    it('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–µ—Ç–æ–¥ render', () => {
      const gridRenderer = new GridRenderer(mockConfig, mockCanvas, 80, 25);
      expect(typeof gridRenderer.render).toBe('function');
    });

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–∞–∑–º–µ—Ä–æ–≤ —è—á–µ–µ–∫', () => {
      const gridRenderer = new GridRenderer(mockConfig, mockCanvas, 100, 30);
      expect(typeof gridRenderer.setCellSize).toBe('function');

      gridRenderer.setCellSize(120, 35);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å
      expect(gridRenderer).toBeDefined();
    });
  });

  describe('‚úÖ –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å instancing –¥–ª—è —è—á–µ–µ–∫', () => {
    let renderManager: RenderManager;

    beforeEach(() => {
      renderManager = new RenderManager(mockConfig, mockCanvas, 80, 25);
    });

    it('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å instancing –≤ renderVisibleCells', async () => {
      await renderManager.initialize();

      const visibleCells: Cell[] = Array.from({ length: 100 }, (_, i) => ({
        row: Math.floor(i / 10),
        col: i % 10,
        value: null,
        screenX: (i % 10) * 80,
        screenY: Math.floor(i / 10) * 25,
        width: 80,
        height: 25,
      }));

      const viewport: Viewport = {
        startRow: 0,
        endRow: 10,
        startCol: 0,
        endCol: 10,
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ (instancing —Ä–∞–±–æ—Ç–∞–µ—Ç)
      expect(() => renderManager.render(visibleCells, viewport)).not.toThrow();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ RenderManager –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫
      expect(visibleCells.length).toBe(100);
    });

    it('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤', async () => {
      await renderManager.initialize();

      const visibleCells: Cell[] = Array.from({ length: 25 }, (_, i) => ({
        row: Math.floor(i / 5),
        col: i % 5,
        value: null,
        screenX: (i % 5) * 80,
        screenY: Math.floor(i / 5) * 25,
        width: 80,
        height: 25,
      }));

      const viewport: Viewport = {
        startRow: 0,
        endRow: 5,
        startCol: 0,
        endCol: 5,
      };

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —è—á–µ–µ–∫
      expect(() => renderManager.render(visibleCells, viewport)).not.toThrow();
    });
  });

  describe('‚úÖ –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: –î–æ–±–∞–≤–∏—Ç—å —à–µ–π–¥–µ—Ä—ã –¥–ª—è —Å–µ—Ç–∫–∏', () => {
    let pipelineBuilder: RenderPipelineBuilder;

    beforeEach(() => {
      pipelineBuilder = new RenderPipelineBuilder(mockDevice);
    });

    it('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è —Å–µ—Ç–∫–∏ —Å vertex –∏ fragment —à–µ–π–¥–µ—Ä–∞–º–∏', () => {
      const pipeline = pipelineBuilder.createGridPipeline();
      expect(pipeline).toBeDefined();
      expect(pipeline.getBindGroupLayout).toBeDefined();
    });

    it('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –≥—Ä–∞–Ω–∏—Ü —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —à–µ–π–¥–µ—Ä–∞–º–∏', () => {
      const pipeline = pipelineBuilder.createBorderPipeline();
      expect(pipeline).toBeDefined();
      expect(pipeline.getBindGroupLayout).toBeDefined();
    });

    it('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å uniform –±—É—Ñ–µ—Ä –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Ç–∫–∏', () => {
      const uniformBuffer = pipelineBuilder.createGridUniformBuffer();
      expect(uniformBuffer).toBeDefined();
      expect(uniformBuffer.destroy).toBeDefined();
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å uniform –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑ –æ—à–∏–±–æ–∫', () => {
      const uniformBuffer = pipelineBuilder.createGridUniformBuffer();

      expect(() => {
        pipelineBuilder.updateGridUniforms(
          uniformBuffer,
          [80, 25], // gridSize
          [80, 25], // cellSize
          [0, 0], // viewportOffset
          [800, 600], // viewportSize
          [10, 24] // totalCells
        );
      }).not.toThrow();
    });
  });

  describe('‚úÖ –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Ä–∏—Å–æ–≤–∫—É', () => {
    let gridRenderer: GridRenderer;

    beforeEach(async () => {
      gridRenderer = new GridRenderer(mockConfig, mockCanvas, 80, 25);
      await gridRenderer.initialize();
    });

    it('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏', async () => {
      const visibleCells: Cell[] = [
        { row: 0, col: 0, value: null, screenX: 0, screenY: 0, width: 80, height: 25 },
      ];
      const viewport: Viewport = { startRow: 0, endRow: 1, startCol: 0, endCol: 1 };

      // –ü–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä
      const start1 = performance.now();
      await gridRenderer.render(visibleCells, viewport);
      const time1 = performance.now() - start1;

      // –í—Ç–æ—Ä–æ–π —Ä–µ–Ω–¥–µ—Ä —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏ (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à)
      const start2 = performance.now();
      await gridRenderer.render(visibleCells, viewport);
      const time2 = performance.now() - start2;

      // –í—Ç–æ—Ä–æ–π —Ä–µ–Ω–¥–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—é
      expect(time2).toBeLessThan(time1 + 1); // +1ms –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
    });

    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ forceRedraw', async () => {
      const visibleCells: Cell[] = [
        { row: 0, col: 0, value: null, screenX: 0, screenY: 0, width: 80, height: 25 },
      ];
      const viewport: Viewport = { startRow: 0, endRow: 1, startCol: 0, endCol: 1 };

      await gridRenderer.render(visibleCells, viewport);

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      gridRenderer.forceRedraw();

      // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
      await expect(gridRenderer.render(visibleCells, viewport)).resolves.not.toThrow();
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ', async () => {
      const cellCount = 1000;
      const visibleCells: Cell[] = Array.from({ length: cellCount }, (_, i) => ({
        row: Math.floor(i / 40),
        col: i % 40,
        value: null,
        screenX: (i % 40) * 80,
        screenY: Math.floor(i / 40) * 25,
        width: 80,
        height: 25,
      }));

      const viewport: Viewport = {
        startRow: 0,
        endRow: 25,
        startCol: 0,
        endCol: 40,
      };

      const start = performance.now();
      await gridRenderer.render(visibleCells, viewport);
      const renderTime = performance.now() - start;

      // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ 1000 —è—á–µ–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º (< 100ms –≤ —Ç–µ—Å—Ç–∞—Ö)
      expect(renderTime).toBeLessThan(100);
    });

    it('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ü–≤–µ—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏', () => {
      expect(() => {
        gridRenderer.setColors(
          [0.9, 0.9, 0.9, 1.0], // gridColor
          [0.7, 0.7, 0.7, 1.0], // borderColor
          [1.0, 1.0, 1.0, 1.0] // backgroundColor
        );
      }).not.toThrow();
    });
  });

  describe('üéØ Sprint 2.1 –ö—Ä–∏—Ç–µ—Ä–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å —Å–µ—Ç–∫—É –±–µ–∑ –æ—à–∏–±–æ–∫', async () => {
      const gridRenderer = new GridRenderer(mockConfig, mockCanvas, 80, 25);
      await gridRenderer.initialize();

      const visibleCells: Cell[] = [
        { row: 0, col: 0, value: null, screenX: 0, screenY: 0, width: 80, height: 25 },
        { row: 0, col: 1, value: 'Test', screenX: 80, screenY: 0, width: 80, height: 25 },
      ];

      const viewport: Viewport = { startRow: 0, endRow: 1, startCol: 0, endCol: 2 };

      await expect(gridRenderer.render(visibleCells, viewport)).resolves.not.toThrow();
    });

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ —è—á–µ–µ–∫', async () => {
      const gridRenderer = new GridRenderer(mockConfig, mockCanvas, 80, 25);
      await gridRenderer.initialize();

      const selectedCell: Cell = {
        row: 1,
        col: 1,
        value: null,
        screenX: 80,
        screenY: 25,
        width: 80,
        height: 25,
      };

      await expect(gridRenderer.renderSelection(selectedCell)).resolves.not.toThrow();
    });

    it('–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —è—á–µ–µ–∫', () => {
      const gridRenderer = new GridRenderer(mockConfig, mockCanvas, 80, 25);

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —è—á–µ–µ–∫
      expect(() => gridRenderer.setCellSize(100, 30)).not.toThrow();
      expect(() => gridRenderer.setCellSize(60, 20)).not.toThrow();
      expect(() => gridRenderer.setCellSize(120, 40)).not.toThrow();
    });

    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞', () => {
      const gridRenderer = new GridRenderer(mockConfig, mockCanvas, 80, 25);
      const stats = gridRenderer.getRenderingStats();

      expect(stats).toBeDefined();
      expect(typeof stats.lastRenderTime).toBe('number');
      expect(typeof stats.visibleCellsCount).toBe('number');
      expect(typeof stats.needsRedraw).toBe('boolean');
      expect(stats.cellSize).toBeDefined();
      expect(stats.cellSize.width).toBe(80);
      expect(stats.cellSize.height).toBe(25);
    });
  });

  describe('üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å Sprint 2.1', () => {
    it('–¥–æ–ª–∂–µ–Ω —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é > 30 FPS (< 33ms –Ω–∞ –∫–∞–¥—Ä)', async () => {
      const gridRenderer = new GridRenderer(mockConfig, mockCanvas, 80, 25);
      await gridRenderer.initialize();

      const visibleCells: Cell[] = Array.from({ length: 200 }, (_, i) => ({
        row: Math.floor(i / 20),
        col: i % 20,
        value: `Cell ${i}`,
        screenX: (i % 20) * 80,
        screenY: Math.floor(i / 20) * 25,
        width: 80,
        height: 25,
      }));

      const viewport: Viewport = {
        startRow: 0,
        endRow: 10,
        startCol: 0,
        endCol: 20,
      };

      const start = performance.now();
      await gridRenderer.render(visibleCells, viewport);
      const renderTime = performance.now() - start;

      // –î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 60 FPS –Ω—É–∂–Ω–æ < 16.67ms, –¥–ª—è 30 FPS –Ω—É–∂–Ω–æ < 33ms
      expect(renderTime).toBeLessThan(33);
    });

    it('–¥–æ–ª–∂–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–º—è—Ç—å', async () => {
      const gridRenderer = new GridRenderer(mockConfig, mockCanvas, 80, 25);
      await gridRenderer.initialize();

      const initialMemory = (performance as any).memory?.usedJSHeapSize || 0;

      // –†–µ–Ω–¥–µ—Ä–∏–º –º–Ω–æ–≥–æ —Ä–∞–∑
      for (let i = 0; i < 100; i++) {
        const visibleCells: Cell[] = Array.from({ length: 50 }, (_, j) => ({
          row: Math.floor(j / 10),
          col: j % 10,
          value: `Cell ${i}-${j}`,
          screenX: (j % 10) * 80,
          screenY: Math.floor(j / 10) * 25,
          width: 80,
          height: 25,
        }));

        const viewport: Viewport = {
          startRow: 0,
          endRow: 5,
          startCol: 0,
          endCol: 10,
        };

        await gridRenderer.render(visibleCells, viewport);
      }

      const finalMemory = (performance as any).memory?.usedJSHeapSize || 0;
      const memoryIncrease = finalMemory - initialMemory;

      // –ü—Ä–∏—Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º (< 10MB)
      expect(memoryIncrease).toBeLessThan(10 * 1024 * 1024);
    });
  });
});
