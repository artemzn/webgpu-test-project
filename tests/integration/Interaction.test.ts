import { describe, it, expect, beforeEach, vi } from 'vitest';
import { App } from '../../src/App';
import { VirtualGrid } from '../../src/core/virtual-grid/VirtualGrid';

// –ú–æ–∫–∞–µ–º WebGPU
Object.defineProperty(navigator, 'gpu', {
  writable: true,
  value: {
    requestAdapter: vi.fn().mockResolvedValue({
      requestDevice: vi.fn().mockResolvedValue({
        createBuffer: vi.fn().mockReturnValue({
          destroy: vi.fn(),
          getMappedRange: vi.fn().mockReturnValue(new ArrayBuffer(64)),
          unmap: vi.fn(),
        }),
        createShaderModule: vi.fn().mockReturnValue({}),
        createRenderPipeline: vi.fn().mockReturnValue({
          getBindGroupLayout: vi.fn().mockReturnValue({}),
        }),
        createBindGroup: vi.fn().mockReturnValue({}),
        createCommandEncoder: vi.fn().mockReturnValue({
          beginRenderPass: vi.fn().mockReturnValue({
            setPipeline: vi.fn(),
            setBindGroup: vi.fn(),
            setVertexBuffer: vi.fn(),
            draw: vi.fn(),
            end: vi.fn(),
          }),
          finish: vi.fn().mockReturnValue({}),
        }),
        queue: {
          writeBuffer: vi.fn(),
          submit: vi.fn(),
        },
        limits: {},
        features: new Set(),
      }),
      limits: {},
      features: new Set(),
    }),
  },
});

// –ú–æ–∫–∞–µ–º ResizeObserver
global.ResizeObserver = vi.fn().mockImplementation(() => ({
  observe: vi.fn(),
  unobserve: vi.fn(),
  disconnect: vi.fn(),
}));

// –ú–æ–∫–∞–µ–º URL API –¥–ª—è —Ç–µ—Å—Ç–æ–≤
global.URL = global.URL || {};
(global.URL as any).createObjectURL = vi.fn().mockReturnValue('blob:mock-url');
(global.URL as any).revokeObjectURL = vi.fn();

describe('Interaction (–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ)', () => {
  let app: App;
  let canvas: HTMLCanvasElement;
  let container: HTMLDivElement;

  beforeEach(async () => {
    // –°–æ–∑–¥–∞–µ–º DOM —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    document.body.innerHTML = `
      <div id="app">
        <div class="toolbar">
          <button class="toolbar-button" data-action="new">–ù–æ–≤—ã–π</button>
          <button class="toolbar-button" data-action="save">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
          <button class="toolbar-button" data-action="copy">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
          <button class="toolbar-button" data-action="paste">–í—Å—Ç–∞–≤–∏—Ç—å</button>
        </div>
        <div class="formula-bar">
          <input id="formula-input" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—É –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ..." />
          <button data-action="enter">‚úì</button>
        </div>
        <div class="spreadsheet-container">
          <canvas id="spreadsheet-canvas" width="800" height="600"></canvas>
        </div>
        <div class="status-bar">
          <span id="cell-info">–ì–æ—Ç–æ–≤</span>
          <span id="fps-counter">FPS: 60</span>
        </div>
        <div class="context-menu" id="context-menu" style="display: none;">
          <div class="context-menu-item" data-action="copy">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</div>
          <div class="context-menu-item" data-action="paste">–í—Å—Ç–∞–≤–∏—Ç—å</div>
          <div class="context-menu-item" data-action="clear">–û—á–∏—Å—Ç–∏—Ç—å</div>
        </div>
      </div>
    `;

    canvas = document.getElementById('spreadsheet-canvas') as HTMLCanvasElement;
    container = document.querySelector('.spreadsheet-container') as HTMLDivElement;

    const config = {
      canvasId: 'spreadsheet-canvas',
      cellWidth: 80,
      cellHeight: 25,
      maxRows: 1000000,
      maxCols: 1000000,
    };

    app = new App(config);
    await app.initialize();
  });

  describe('üñ±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –º—ã—à–∏', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–ª–∏–∫–∏ –ø–æ —è—á–µ–π–∫–∞–º', () => {
      const rect = canvas.getBoundingClientRect();
      const mockEvent = new MouseEvent('click', {
        clientX: rect.left + 100, // –ü—Ä–∏–º–µ—Ä–Ω–æ —è—á–µ–π–∫–∞ (1, 4)
        clientY: rect.top + 100,
        bubbles: true,
      });

      // –ú–æ–∫–∞–µ–º getBoundingClientRect
      vi.spyOn(canvas, 'getBoundingClientRect').mockReturnValue({
        left: 0,
        top: 0,
        width: 800,
        height: 600,
        right: 800,
        bottom: 600,
        x: 0,
        y: 0,
        toJSON: () => ({}),
      });

      canvas.dispatchEvent(mockEvent);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–∫—Ç–∏–≤–Ω–∞—è —è—á–µ–π–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
      const virtualGrid = (app as any).virtualGrid as VirtualGrid;
      expect(virtualGrid).toBeDefined();
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –¥–ª—è hover —ç—Ñ—Ñ–µ–∫—Ç–æ–≤', () => {
      const mockEvent = new MouseEvent('mousemove', {
        clientX: 150,
        clientY: 75,
        bubbles: true,
      });

      vi.spyOn(canvas, 'getBoundingClientRect').mockReturnValue({
        left: 0,
        top: 0,
        width: 800,
        height: 600,
        right: 800,
        bottom: 600,
        x: 0,
        y: 0,
        toJSON: () => ({}),
      });

      expect(() => {
        canvas.dispatchEvent(mockEvent);
      }).not.toThrow();
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏', () => {
      const mockEvent = new WheelEvent('wheel', {
        deltaY: 100, // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
        bubbles: true,
      });

      expect(() => {
        canvas.dispatchEvent(mockEvent);
      }).not.toThrow();
    });
  });

  describe('üéØ –í—ã–¥–µ–ª–µ–Ω–∏–µ —è—á–µ–µ–∫', () => {
    it('–¥–æ–ª–∂–µ–Ω –≤–∏–∑—É–∞–ª—å–Ω–æ –≤—ã–¥–µ–ª—è—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —è—á–µ–π–∫—É', async () => {
      const virtualGrid = (app as any).virtualGrid as VirtualGrid;

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —è—á–µ–π–∫—É
      virtualGrid.setActiveCell({ row: 2, col: 3 });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —è—á–µ–π–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
      const activeCell = virtualGrid.getActiveCell();
      expect(activeCell).toEqual({ row: 2, col: 3 });
    });

    it('–¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ', async () => {
      const virtualGrid = (app as any).virtualGrid as VirtualGrid;

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —è—á–µ–π–∫—É
      virtualGrid.setActiveCell({ row: 5, col: 7 });

      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º
      virtualGrid.scrollDown();
      virtualGrid.scrollDown();

      // –í—ã–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è
      const activeCell = virtualGrid.getActiveCell();
      expect(activeCell).toEqual({ row: 5, col: 7 });
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è—á–µ–π–∫–µ –≤ UI', () => {
      const virtualGrid = (app as any).virtualGrid as VirtualGrid;
      const cellInfo = document.getElementById('cell-info');

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —è—á–µ–π–∫—É
      virtualGrid.setActiveCell({ row: 1, col: 2 });

      // –û–±–Ω–æ–≤–ª—è–µ–º UI (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ App)
      (app as any).updateStatusBar();

      // Status bar –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "C2" (—Å—Ç–æ–ª–±–µ—Ü C, —Å—Ç—Ä–æ–∫–∞ 2)
      expect(cellInfo?.textContent).toContain('C2');
    });
  });

  describe('‚å®Ô∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', () => {
      const virtualGrid = (app as any).virtualGrid as VirtualGrid;
      virtualGrid.setActiveCell({ row: 5, col: 5 });

      // –°—Ç—Ä–µ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ
      const rightEvent = new KeyboardEvent('keydown', { key: 'ArrowRight', bubbles: true });
      document.dispatchEvent(rightEvent);

      // –°—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑
      const downEvent = new KeyboardEvent('keydown', { key: 'ArrowDown', bubbles: true });
      document.dispatchEvent(downEvent);

      expect(() => {
        document.dispatchEvent(rightEvent);
        document.dispatchEvent(downEvent);
      }).not.toThrow();
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å Tab –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', () => {
      const tabEvent = new KeyboardEvent('keydown', { key: 'Tab', bubbles: true });

      expect(() => {
        document.dispatchEvent(tabEvent);
      }).not.toThrow();
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å Enter –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', () => {
      const enterEvent = new KeyboardEvent('keydown', { key: 'Enter', bubbles: true });

      expect(() => {
        document.dispatchEvent(enterEvent);
      }).not.toThrow();
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å Home/End –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', () => {
      const homeEvent = new KeyboardEvent('keydown', { key: 'Home', bubbles: true });
      const endEvent = new KeyboardEvent('keydown', { key: 'End', bubbles: true });

      expect(() => {
        document.dispatchEvent(homeEvent);
        document.dispatchEvent(endEvent);
      }).not.toThrow();
    });
  });

  describe('üìù –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞', () => {
    it('–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ F2', () => {
      const f2Event = new KeyboardEvent('keydown', { key: 'F2', bubbles: true });

      expect(() => {
        document.dispatchEvent(f2Event);
      }).not.toThrow();
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–≤–æ–¥ —Ñ–æ—Ä–º—É–ª —á–µ—Ä–µ–∑ formula bar', () => {
      const formulaInput = document.getElementById('formula-input') as HTMLInputElement;
      const enterButton = document.querySelector('[data-action="enter"]') as HTMLButtonElement;

      expect(formulaInput).toBeDefined();
      expect(enterButton).toBeDefined();

      // –í–≤–æ–¥–∏–º —Ñ–æ—Ä–º—É–ª—É
      formulaInput.value = '=SUM(A1:A10)';

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
      expect(formulaInput.value).toBe('=SUM(A1:A10)');

      // –ù–∞–∂–∏–º–∞–µ–º Enter (–∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –æ—á–∏—Å—Ç–∏—Ç—å—Å—è - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
      const enterEvent = new KeyboardEvent('keydown', { key: 'Enter', bubbles: true });
      formulaInput.dispatchEvent(enterEvent);

      // –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—É–ª—ã –ø–æ–ª–µ –º–æ–∂–µ—Ç –æ—á–∏—Å—Ç–∏—Ç—å—Å—è
      expect(formulaInput).toBeDefined();
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥', () => {
      const formulaInput = document.getElementById('formula-input') as HTMLInputElement;

      // –í–≤–æ–¥–∏–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
      formulaInput.value = '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ';

      expect(formulaInput.value).toBe('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
    });

    it('–¥–æ–ª–∂–µ–Ω –æ—á–∏—â–∞—Ç—å —è—á–µ–π–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Delete', () => {
      const deleteEvent = new KeyboardEvent('keydown', { key: 'Delete', bubbles: true });

      expect(() => {
        document.dispatchEvent(deleteEvent);
      }).not.toThrow();
    });
  });

  describe('üéõÔ∏è UI —ç–ª–µ–º–µ–Ω—Ç—ã', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–ª–∏–∫–∏ –ø–æ toolbar –∫–Ω–æ–ø–∫–∞–º', () => {
      const newButton = document.querySelector('[data-action="new"]') as HTMLButtonElement;
      const saveButton = document.querySelector('[data-action="save"]') as HTMLButtonElement;
      const copyButton = document.querySelector('[data-action="copy"]') as HTMLButtonElement;
      const pasteButton = document.querySelector('[data-action="paste"]') as HTMLButtonElement;

      expect(() => {
        newButton.click();
        saveButton.click();
        copyButton.click();
        pasteButton.click();
      }).not.toThrow();
    });

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –ø—Ä–∞–≤–æ–º –∫–ª–∏–∫–µ', () => {
      const contextMenu = document.getElementById('context-menu') as HTMLDivElement;
      const rightClickEvent = new MouseEvent('contextmenu', {
        clientX: 200,
        clientY: 200,
        bubbles: true,
      });

      vi.spyOn(canvas, 'getBoundingClientRect').mockReturnValue({
        left: 0,
        top: 0,
        width: 800,
        height: 600,
        right: 800,
        bottom: 600,
        x: 0,
        y: 0,
        toJSON: () => ({}),
      });

      canvas.dispatchEvent(rightClickEvent);

      expect(contextMenu).toBeDefined();
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å formula bar –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —è—á–µ–π–∫–∏', () => {
      const formulaInput = document.getElementById('formula-input') as HTMLInputElement;
      const virtualGrid = (app as any).virtualGrid as VirtualGrid;

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —è—á–µ–π–∫—É
      virtualGrid.setActiveCell({ row: 1, col: 1 });

      // –û–±–Ω–æ–≤–ª—è–µ–º formula bar
      (app as any).updateFormulaBar({ row: 1, col: 1 });

      expect(formulaInput).toBeDefined();
    });

    it('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å FPS –≤ status bar', () => {
      const fpsCounter = document.getElementById('fps-counter');

      expect(fpsCounter).toBeDefined();
      expect(fpsCounter?.textContent).toContain('FPS');
    });
  });

  describe('üìã –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', () => {
    it('–¥–æ–ª–∂–µ–Ω –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏', () => {
      const virtualGrid = (app as any).virtualGrid as VirtualGrid;
      const sparseMatrix = (app as any).sparseMatrix;

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —è—á–µ–π–∫—É
      virtualGrid.setActiveCell({ row: 2, col: 3 });
      sparseMatrix.setCell(2, 3, '–¢–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');

      // –ö–æ–ø–∏—Ä—É–µ–º
      expect(() => {
        (app as any).copy();
      }).not.toThrow();
    });

    it('–¥–æ–ª–∂–µ–Ω –≤—Å—Ç–∞–≤–ª—è—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ –±—É—Ñ–µ—Ä–∞', () => {
      const virtualGrid = (app as any).virtualGrid as VirtualGrid;
      virtualGrid.setActiveCell({ row: 1, col: 1 });

      // –í—Å—Ç–∞–≤–ª—è–µ–º
      expect(() => {
        (app as any).paste();
      }).not.toThrow();
    });

    it('–¥–æ–ª–∂–µ–Ω –æ—á–∏—â–∞—Ç—å —è—á–µ–π–∫–∏', () => {
      const virtualGrid = (app as any).virtualGrid as VirtualGrid;
      virtualGrid.setActiveCell({ row: 1, col: 1 });

      // –û—á–∏—â–∞–µ–º
      expect(() => {
        (app as any).clearCell();
      }).not.toThrow();
    });
  });

  describe('üéØ –ö—Ä–∏—Ç–µ—Ä–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏ –±–µ–∑ –æ—à–∏–±–æ–∫', () => {
      const events = ['click', 'mousemove', 'wheel', 'contextmenu'];

      vi.spyOn(canvas, 'getBoundingClientRect').mockReturnValue({
        left: 0,
        top: 0,
        width: 800,
        height: 600,
        right: 800,
        bottom: 600,
        x: 0,
        y: 0,
        toJSON: () => ({}),
      });

      events.forEach(eventType => {
        const event = new MouseEvent(eventType, { bubbles: true });
        expect(() => canvas.dispatchEvent(event)).not.toThrow();
      });
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ –∫–ª–∞–≤–∏—à–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –±–µ–∑ –æ—à–∏–±–æ–∫', () => {
      const keys = [
        'ArrowUp',
        'ArrowDown',
        'ArrowLeft',
        'ArrowRight',
        'Tab',
        'Enter',
        'Home',
        'End',
        'F2',
        'Delete',
        'Backspace',
      ];

      keys.forEach(key => {
        const event = new KeyboardEvent('keydown', { key, bubbles: true });
        expect(() => document.dispatchEvent(event)).not.toThrow();
      });
    });

    it('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ —è—á–µ–µ–∫', async () => {
      const virtualGrid = (app as any).virtualGrid as VirtualGrid;
      const gridRenderer = (app as any).gridRenderer;

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —è—á–µ–π–∫—É
      virtualGrid.setActiveCell({ row: 3, col: 4 });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
      expect(virtualGrid).toBeDefined();

      if (gridRenderer) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–æ—Ö–æ–¥–∏—Ç –±–µ–∑ –æ—à–∏–±–æ–∫
        const visibleCells = virtualGrid.getVisibleCells();
        const viewport = virtualGrid.getViewport();

        await expect(gridRenderer.render(visibleCells, viewport)).resolves.not.toThrow();
      } else {
        // –ï—Å–ª–∏ WebGPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ VirtualGrid —Ä–∞–±–æ—Ç–∞–µ—Ç
        expect(virtualGrid.getActiveCell()).toEqual({ row: 3, col: 4 });
      }
    });

    it('–¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏', () => {
      const virtualGrid = (app as any).virtualGrid as VirtualGrid;
      const sparseMatrix = (app as any).sparseMatrix;

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      virtualGrid.setActiveCell({ row: 5, col: 5 });
      sparseMatrix.setCell(5, 5, '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');

      // –ù–∞–≤–∏–≥–∞—Ü–∏—è
      virtualGrid.setActiveCell({ row: 6, col: 6 });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
      virtualGrid.setActiveCell({ row: 5, col: 5 });

      // –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è
      const value = sparseMatrix.getCell(5, 5);
      expect(value).toBe('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
    });

    it('–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö —ç–∫—Ä–∞–Ω–∞', () => {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
      Object.defineProperty(canvas, 'width', { value: 1200, writable: true });
      Object.defineProperty(canvas, 'height', { value: 800, writable: true });

      // –≠–º—É–ª–∏—Ä—É–µ–º resize event
      const resizeEvent = new Event('resize');
      window.dispatchEvent(resizeEvent);

      expect(canvas.width).toBe(1200);
      expect(canvas.height).toBe(800);
    });
  });

  describe('üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±—ã—Å—Ç—Ä—ã–µ –∫–ª–∏–∫–∏ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫', () => {
      const startTime = performance.now();

      vi.spyOn(canvas, 'getBoundingClientRect').mockReturnValue({
        left: 0,
        top: 0,
        width: 800,
        height: 600,
        right: 800,
        bottom: 600,
        x: 0,
        y: 0,
        toJSON: () => ({}),
      });

      // –ë—ã—Å—Ç—Ä—ã–µ –∫–ª–∏–∫–∏
      for (let i = 0; i < 50; i++) {
        const event = new MouseEvent('click', {
          clientX: 100 + i * 2,
          clientY: 100 + i * 2,
          bubbles: true,
        });
        canvas.dispatchEvent(event);
      }

      const endTime = performance.now();
      const totalTime = endTime - startTime;

      // –î–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ (–º–µ–Ω—å—à–µ 100ms)
      expect(totalTime).toBeLessThan(100);
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±—ã—Å—Ç—Ä—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π', () => {
      const startTime = performance.now();

      // –ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
      for (let i = 0; i < 100; i++) {
        const key = i % 2 === 0 ? 'ArrowRight' : 'ArrowDown';
        const event = new KeyboardEvent('keydown', { key, bubbles: true });
        document.dispatchEvent(event);
      }

      const endTime = performance.now();
      const totalTime = endTime - startTime;

      // –î–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ (–º–µ–Ω—å—à–µ 200ms –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã)
      expect(totalTime).toBeLessThan(200);
    });
  });
});
