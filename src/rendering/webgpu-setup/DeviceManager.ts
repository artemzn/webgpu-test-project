/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä WebGPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 */

import type { WebGPUConfig, InitializationResult } from '../../types/index.js';

export class WebGPUDeviceManager {
  private device: GPUDevice | null = null;
  private context: GPUCanvasContext | null = null;
  private adapter: GPUAdapter | null = null;
  private format: GPUTextureFormat | null = null;

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebGPU
   */
  async initialize(canvas: HTMLCanvasElement): Promise<InitializationResult> {
    try {
      console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ WebGPU...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É WebGPU
      if (!this.isWebGPUSupported()) {
        return {
          success: false,
          error: 'WebGPU –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ',
        };
      }

      // –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
      console.log('üîß –ü–æ–ª—É—á–µ–Ω–∏–µ GPU –∞–¥–∞–ø—Ç–µ—Ä–∞...');
      this.adapter = await this.requestGPUAdapter();
      if (!this.adapter) {
        return {
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å GPU –∞–¥–∞–ø—Ç–µ—Ä',
        };
      }

      // –°–æ–∑–¥–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
      console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ GPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...');
      this.device = await this.createDevice();
      if (!this.device) {
        return {
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å GPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
        };
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç
      console.log('üîß –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ canvas...');
      this.format = navigator.gpu.getPreferredCanvasFormat();

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç canvas
      console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ canvas –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...');
      this.context = await this.setupCanvasContext(canvas);
      if (!this.context) {
        return {
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å canvas –∫–æ–Ω—Ç–µ–∫—Å—Ç',
        };
      }

      const config: WebGPUConfig = {
        device: this.device,
        context: this.context,
        adapter: this.adapter,
        format: this.format,
      };

      console.log('‚úÖ WebGPU —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

      return {
        success: true,
        config,
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebGPU:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ WebGPU
   */
  private isWebGPUSupported(): boolean {
    return 'gpu' in navigator;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ GPU –∞–¥–∞–ø—Ç–µ—Ä–∞
   */
  private async requestGPUAdapter(): Promise<GPUAdapter | null> {
    try {
      const adapter = await navigator.gpu.requestAdapter({
        powerPreference: 'high-performance',
      });

      if (!adapter) {
        throw new Error('–ê–¥–∞–ø—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      console.log('‚úÖ GPU –∞–¥–∞–ø—Ç–µ—Ä –ø–æ–ª—É—á–µ–Ω:', adapter);
      return adapter;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞:', error);
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ GPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  private async createDevice(): Promise<GPUDevice | null> {
    try {
      if (!this.adapter) {
        throw new Error('–ê–¥–∞–ø—Ç–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

      const device = await this.adapter.requestDevice({
        requiredFeatures: [],
        requiredLimits: {
          maxStorageBufferBindingSize: 134217728, // 128MB
          maxBufferSize: 268435456, // 256MB
        },
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      device.addEventListener('uncapturederror', (event: GPUUncapturedErrorEvent) => {
        console.error('WebGPU –æ—à–∏–±–∫–∞:', event.error);
      });

      console.log('‚úÖ GPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ:', device);
      return device;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
      return null;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ canvas
   */
  private async setupCanvasContext(canvas: HTMLCanvasElement): Promise<GPUCanvasContext | null> {
    try {
      const context = canvas.getContext('webgpu') as unknown as GPUCanvasContext;
      if (!context) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å WebGPU –∫–æ–Ω—Ç–µ–∫—Å—Ç');
      }

      if (!this.device || !this.format) {
        throw new Error('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      }

      context.configure({
        device: this.device,
        format: this.format,
        alphaMode: 'premultiplied',
      });

      console.log('‚úÖ Canvas –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return context;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  getDevice(): GPUDevice | null {
    return this.device;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  getContext(): GPUCanvasContext | null {
    return this.context;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞
   */
  getAdapter(): GPUAdapter | null {
    return this.adapter;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞
   */
  getFormat(): GPUTextureFormat | null {
    return this.format;
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  dispose(): void {
    if (this.device) {
      this.device.destroy();
      this.device = null;
    }

    this.context = null;
    this.adapter = null;
    this.format = null;

    console.log('üßπ WebGPU —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');
  }
}
