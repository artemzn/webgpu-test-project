/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ WebGPU
 */

import type { WebGPUConfig } from '../../types/index.js';
import { RenderPipelineBuilder } from './RenderPipelineBuilder.js';

export class RenderManager {
  private device: GPUDevice;
  private context: GPUCanvasContext;

  private pipelineBuilder: RenderPipelineBuilder;
  private gridPipeline: GPURenderPipeline | null = null;
  private borderPipeline: GPURenderPipeline | null = null;
  private selectionPipeline: GPURenderPipeline | null = null;
  private textPipeline: GPURenderPipeline | null = null;

  private gridUniformBuffer: GPUBuffer | null = null;
  private gridBindGroup: GPUBindGroup | null = null;
  private borderBindGroup: GPUBindGroup | null = null;
  private gridVertexBuffer: GPUBuffer | null = null;

  private canvas: HTMLCanvasElement;

  constructor(config: WebGPUConfig, canvas: HTMLCanvasElement) {
    this.device = config.device;
    this.context = config.context;
    this.canvas = canvas;

    this.pipelineBuilder = new RenderPipelineBuilder(this.device);

    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RenderManager...');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä-–ø–∞–π–ø–ª–∞–π–Ω–æ–≤
   */
  async initialize(): Promise<void> {
    try {
      console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä-–ø–∞–π–ø–ª–∞–π–Ω–æ–≤...');

      // –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω—ã
      this.gridPipeline = this.pipelineBuilder.createGridPipeline();
      this.borderPipeline = this.pipelineBuilder.createBorderPipeline();
      this.selectionPipeline = this.pipelineBuilder.createSelectionPipeline();
      this.textPipeline = this.pipelineBuilder.createTextPipeline();

      // –°–æ–∑–¥–∞–µ–º uniform –±—É—Ñ–µ—Ä—ã –∏ bind groups
      this.gridUniformBuffer = this.pipelineBuilder.createGridUniformBuffer();
      this.gridBindGroup = this.pipelineBuilder.createGridBindGroup(
        this.gridPipeline,
        this.gridUniformBuffer
      );
      this.borderBindGroup = this.pipelineBuilder.createGridBindGroup(
        this.borderPipeline,
        this.gridUniformBuffer
      );

      // –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –≤–µ—Ä—à–∏–Ω –¥–ª—è –∫–≤–∞–¥–∞ (0,0) –¥–æ (1,1)
      const vertices = new Float32Array([
        0.0,
        0.0, // top-left
        1.0,
        0.0, // top-right
        0.0,
        1.0, // bottom-left

        0.0,
        1.0, // bottom-left
        1.0,
        0.0, // top-right
        1.0,
        1.0, // bottom-right
      ]);
      this.gridVertexBuffer = this.device.createBuffer({
        size: vertices.byteLength,
        usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,
        mappedAtCreation: true,
      });
      new Float32Array(this.gridVertexBuffer.getMappedRange()).set(vertices);
      this.gridVertexBuffer.unmap();
      console.log('‚úÖ –ë—É—Ñ–µ—Ä –≤–µ—Ä—à–∏–Ω –¥–ª—è –∫–≤–∞–¥–∞ —Å–æ–∑–¥–∞–Ω');

      console.log('‚úÖ RenderManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RenderManager:', error);
      throw error;
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞–¥—Ä–∞
   */
  render(visibleCells: any[], viewport: any): void {
    if (!this.gridPipeline || !this.gridBindGroup) {
      console.warn('‚ö†Ô∏è –ü–∞–π–ø–ª–∞–π–Ω—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      return;
    }

    if (!visibleCells || !viewport) {
      throw new Error('Invalid parameters: visibleCells and viewport must be provided');
    }

    try {
      // –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–Ω–¥–µ—Ä-–ø–∞—Å—Å
      const commandEncoder = this.device.createCommandEncoder();
      const textureView = this.context.getCurrentTexture().createView();

      const renderPass = commandEncoder.beginRenderPass({
        colorAttachments: [
          {
            view: textureView,
            clearValue: { r: 1.0, g: 1.0, b: 1.0, a: 1.0 },
            loadOp: 'clear',
            storeOp: 'store',
          },
        ],
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º uniform –±—É—Ñ–µ—Ä
      this.updateGridUniforms(viewport);

      // 1. –†–µ–Ω–¥–µ—Ä–∏–º —Ñ–æ–Ω —è—á–µ–µ–∫
      renderPass.setPipeline(this.gridPipeline);
      renderPass.setBindGroup(0, this.gridBindGroup);
      if (this.gridVertexBuffer) {
        renderPass.setVertexBuffer(0, this.gridVertexBuffer);
      }
      this.renderVisibleCells(renderPass, visibleCells);

      // 2. –†–µ–Ω–¥–µ—Ä–∏–º –≥—Ä–∞–Ω–∏—Ü—ã —è—á–µ–µ–∫ –ø–æ–≤–µ—Ä—Ö —Ñ–æ–Ω–∞
      renderPass.setPipeline(this.borderPipeline);
      renderPass.setBindGroup(0, this.borderBindGroup);
      if (this.gridVertexBuffer) {
        renderPass.setVertexBuffer(0, this.gridVertexBuffer);
      }
      this.renderVisibleCells(renderPass, visibleCells);

      // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–Ω–¥–µ—Ä-–ø–∞—Å—Å
      renderPass.end();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞ GPU
      this.device.queue.submit([commandEncoder.finish()]);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:', error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ uniform –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Ç–∫–∏
   */
  private updateGridUniforms(viewport: any): void {
    if (!this.gridUniformBuffer) return;

    const gridSize: [number, number] = [80, 25]; // –†–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏
    const cellSize: [number, number] = [80, 25];
    const viewportOffset: [number, number] = [
      -viewport.startCol * cellSize[0], // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π offset –¥–ª—è —Å–¥–≤–∏–≥–∞
      -viewport.startRow * cellSize[1],
    ];
    const viewportSize: [number, number] = [this.canvas.width, this.canvas.height];
    const totalCells: [number, number] = [
      viewport.endCol - viewport.startCol,
      viewport.endRow - viewport.startRow,
    ];

    this.pipelineBuilder.updateGridUniforms(
      this.gridUniformBuffer,
      gridSize,
      cellSize,
      viewportOffset,
      viewportSize,
      totalCells
    );
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∏–¥–∏–º—ã—Ö —è—á–µ–µ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π instancing
   */
  private renderVisibleCells(renderPass: GPURenderPassEncoder, visibleCells: any[]): void {
    const cellCount = visibleCells.length || 100;

    if (cellCount === 0) return;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º instancing –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —è—á–µ–µ–∫
    // –†–µ–Ω–¥–µ—Ä–∏–º –æ–¥–∏–Ω –∫–≤–∞–¥ (6 –≤–µ—Ä—à–∏–Ω) –¥–ª—è –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏
    renderPass.draw(6, cellCount, 0, 0);
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—ã–¥–µ–ª–µ–Ω–∏—è —è—á–µ–π–∫–∏
   */
  renderSelection(_selectedCell: any): void {
    if (!this.selectionPipeline) return;

    try {
      const commandEncoder = this.device.createCommandEncoder();
      const textureView = this.context.getCurrentTexture().createView();

      const renderPass = commandEncoder.beginRenderPass({
        colorAttachments: [
          {
            view: textureView,
            loadOp: 'load', // –ù–µ –æ—á–∏—â–∞–µ–º, —Ä–∏—Å—É–µ–º –ø–æ–≤–µ—Ä—Ö
            storeOp: 'store',
          },
        ],
      });

      renderPass.setPipeline(this.selectionPipeline);

      // –†–µ–Ω–¥–µ—Ä–∏–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ (6 –≤–µ—Ä—à–∏–Ω –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–≤–∞–¥–∞)
      renderPass.draw(6, 1, 0, 0);

      renderPass.end();
      this.device.queue.submit([commandEncoder.finish()]);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –≤ —è—á–µ–π–∫–µ
   */
  renderCellText(cell: any, text: string): void {
    if (!this.textPipeline) return;

    // –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ WebGPU
    console.log(`üìù –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ "${text}" –≤ —è—á–µ–π–∫–µ ${cell.row},${cell.col}`);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  dispose(): void {
    if (this.gridUniformBuffer) {
      this.gridUniformBuffer.destroy();
      this.gridUniformBuffer = null;
    }

    this.gridPipeline = null;
    this.selectionPipeline = null;
    this.textPipeline = null;
    this.gridBindGroup = null;

    console.log('üßπ RenderManager —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
   */
  getRenderStats(): {
    pipelinesCreated: number;
    uniformBuffersCreated: number;
    bindGroupsCreated: number;
  } {
    return {
      pipelinesCreated: [this.gridPipeline, this.selectionPipeline, this.textPipeline].filter(
        Boolean
      ).length,
      uniformBuffersCreated: this.gridUniformBuffer ? 1 : 0,
      bindGroupsCreated: this.gridBindGroup ? 1 : 0,
    };
  }
}
