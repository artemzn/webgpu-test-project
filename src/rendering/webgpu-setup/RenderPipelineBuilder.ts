/**
 * –°—Ç—Ä–æ–∏—Ç–µ–ª—å —Ä–µ–Ω–¥–µ—Ä-–ø–∞–π–ø–ª–∞–π–Ω–æ–≤ –¥–ª—è WebGPU
 */

export class RenderPipelineBuilder {
  private device: GPUDevice;

  constructor(device: GPUDevice) {
    this.device = device;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å–µ—Ç–∫–∏ —è—á–µ–µ–∫
   */
  createGridPipeline(): GPURenderPipeline {
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è —Å–µ—Ç–∫–∏...');

    const vertexShader = this.createVertexShader();
    const fragmentShader = this.createFragmentShader();

    const shaderModule = this.device.createShaderModule({
      code: `${vertexShader}\n\n${fragmentShader}`,
      label: 'Grid Pipeline Shader',
    });

    const pipeline = this.device.createRenderPipeline({
      layout: 'auto',
      vertex: {
        module: shaderModule,
        entryPoint: 'vs_main',
        buffers: [],
      },
      fragment: {
        module: shaderModule,
        entryPoint: 'fs_main',
        targets: [
          {
            format: 'bgra8unorm',
          },
        ],
      },
      primitive: {
        topology: 'triangle-list',
      },
      label: 'Grid Render Pipeline',
    });

    console.log('‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –¥–ª—è —Å–µ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω');
    return pipeline;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—à–∏–Ω–Ω–æ–≥–æ —à–µ–π–¥–µ—Ä–∞
   */
  private createVertexShader(): string {
    return `
      struct VertexOutput {
        @builtin(position) position: vec4f,
        @location(0) color: vec4f,
        @location(1) cellCoord: vec2f,
        @location(2) cellIndex: vec2f
      };

      struct GridUniforms {
        gridSize: vec2f,
        cellSize: vec2f,
        viewportOffset: vec2f,
        viewportSize: vec2f,
        totalCells: vec2f
      }

      @group(0) @binding(0) var<uniform> gridUniforms: GridUniforms;

      @vertex
      fn vs_main(@builtin(vertex_index) vertexIndex: u32) -> VertexOutput {
        var output: VertexOutput;
        
        // –°–æ–∑–¥–∞–µ–º –∫–≤–∞–¥ –∏–∑ 6 –≤–µ—Ä—à–∏–Ω (2 —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞)
        let positions = array<vec2f, 6>(
          vec2f(0.0, 0.0), vec2f(1.0, 0.0), vec2f(0.0, 1.0),
          vec2f(0.0, 1.0), vec2f(1.0, 0.0), vec2f(1.0, 1.0)
        );
        
        let pos = positions[vertexIndex];
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —è—á–µ–π–∫–∏
        let cellX = f32(vertexIndex / 6);
        let cellY = 0.0; // –ë—É–¥–µ—Ç –≤—ã—á–∏—Å–ª—è—Ç—å—Å—è –≤ compute shader
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        let worldPos = vec2f(
          cellX * gridUniforms.cellSize.x + gridUniforms.viewportOffset.x,
          cellY * gridUniforms.cellSize.y + gridUniforms.viewportOffset.y
        );
        
        output.position = vec4f(worldPos, 0.0, 1.0);
        output.color = vec4f(0.95, 0.95, 0.95, 1.0); // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
        output.cellCoord = pos;
        output.cellIndex = vec2f(cellX, cellY);
        
        return output;
      }
    `;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–Ω–æ–≥–æ —à–µ–π–¥–µ—Ä–∞
   */
  private createFragmentShader(): string {
    return `
      @fragment
      fn fs_main(
        @location(0) color: vec4f,
        @location(1) cellCoord: vec2f,
        @location(2) cellIndex: vec2f
      ) -> @location(0) vec4f {
        
        // –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —è—á–µ–µ–∫
        let borderWidth = 0.02;
        if (cellCoord.x < borderWidth || 
            cellCoord.x > 1.0 - borderWidth ||
            cellCoord.y < borderWidth || 
            cellCoord.y > 1.0 - borderWidth) {
          return vec4f(0.7, 0.7, 0.7, 1.0); // –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
        }
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç —è—á–µ–π–∫–∏
        return color;
      }
    `;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ uniform –±—É—Ñ–µ—Ä–∞ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Ç–∫–∏
   */
  createGridUniformBuffer(): GPUBuffer {
    const buffer = this.device.createBuffer({
      size: 64, // 16 floats * 4 bytes each
      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,
      label: 'Grid Uniform Buffer',
    });

    console.log('‚úÖ Uniform –±—É—Ñ–µ—Ä –¥–ª—è —Å–µ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω');
    return buffer;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ bind group –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Ç–∫–∏
   */
  createGridBindGroup(pipeline: GPURenderPipeline, uniformBuffer: GPUBuffer): GPUBindGroup {
    const bindGroup = this.device.createBindGroup({
      layout: pipeline.getBindGroupLayout(0),
      entries: [
        {
          binding: 0,
          resource: {
            buffer: uniformBuffer,
          },
        },
      ],
      label: 'Grid Bind Group',
    });

    console.log('‚úÖ Bind group –¥–ª—è —Å–µ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω');
    return bindGroup;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ uniform –±—É—Ñ–µ—Ä–∞
   */
  updateGridUniforms(
    uniformBuffer: GPUBuffer,
    gridSize: [number, number],
    cellSize: [number, number],
    viewportOffset: [number, number],
    viewportSize: [number, number],
    totalCells: [number, number]
  ): void {
    const data = new Float32Array([
      ...gridSize, // gridSize: vec2f
      ...cellSize, // cellSize: vec2f
      ...viewportOffset, // viewportOffset: vec2f
      ...viewportSize, // viewportSize: vec2f
      ...totalCells, // totalCells: vec2f
      0.0,
      0.0, // padding
    ]);

    this.device.queue.writeBuffer(uniformBuffer, 0, data);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
   */
  createTextPipeline(): GPURenderPipeline {
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞...');

    // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–∞–π–ø–ª–∞–π–Ω
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç-—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
    return this.createGridPipeline();
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫
   */
  createSelectionPipeline(): GPURenderPipeline {
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è...');

    const vertexShader = `
      struct VertexOutput {
        @builtin(position) position: vec4f,
        @location(0) color: vec4f
      };

      @vertex
      fn vs_main(@builtin(vertex_index) vertexIndex: u32) -> VertexOutput {
        var output: VertexOutput;
        
        let positions = array<vec2f, 6>(
          vec2f(0.0, 0.0), vec2f(1.0, 0.0), vec2f(0.0, 1.0),
          vec2f(0.0, 1.0), vec2f(1.0, 0.0), vec2f(1.0, 1.0)
        );
        
        let pos = positions[vertexIndex];
        output.position = vec4f(pos * 2.0 - 1.0, 0.0, 1.0);
        output.color = vec4f(0.0, 0.5, 1.0, 0.3); // –°–∏–Ω–µ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        
        return output;
      }
    `;

    const fragmentShader = `
      @fragment
      fn fs_main(@location(0) color: vec4f) -> @location(0) vec4f {
        return color;
      }
    `;

    const shaderModule = this.device.createShaderModule({
      code: `${vertexShader}\n\n${fragmentShader}`,
      label: 'Selection Pipeline Shader',
    });

    const pipeline = this.device.createRenderPipeline({
      layout: 'auto',
      vertex: {
        module: shaderModule,
        entryPoint: 'vs_main',
        buffers: [],
      },
      fragment: {
        module: shaderModule,
        entryPoint: 'fs_main',
        targets: [
          {
            format: 'bgra8unorm',
          },
        ],
      },
      primitive: {
        topology: 'triangle-list',
      },
      label: 'Selection Render Pipeline',
    });

    console.log('‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω');
    return pipeline;
  }
}
