/**
 * –°—Ç—Ä–æ–∏—Ç–µ–ª—å —Ä–µ–Ω–¥–µ—Ä-–ø–∞–π–ø–ª–∞–π–Ω–æ–≤ –¥–ª—è WebGPU
 */

export class RenderPipelineBuilder {
  private device: GPUDevice;

  constructor(device: GPUDevice) {
    this.device = device;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å–µ—Ç–∫–∏ —è—á–µ–µ–∫
   */
  createGridPipeline(): GPURenderPipeline {
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è —Å–µ—Ç–∫–∏...');

    const vertexShader = this.createVertexShader();
    const fragmentShader = this.createFragmentShader();

    const shaderModule = this.device.createShaderModule({
      code: `${vertexShader}\n\n${fragmentShader}`,
      label: 'Grid Pipeline Shader',
    });

    const pipeline = this.device.createRenderPipeline({
      layout: 'auto',
      vertex: {
        module: shaderModule,
        entryPoint: 'vs_main',
        buffers: [],
      },
      fragment: {
        module: shaderModule,
        entryPoint: 'fs_main',
        targets: [
          {
            format: 'bgra8unorm',
          },
        ],
      },
      primitive: {
        topology: 'triangle-list',
      },
      label: 'Grid Render Pipeline',
    });

    console.log('‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –¥–ª—è —Å–µ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω');
    return pipeline;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—à–∏–Ω–Ω–æ–≥–æ —à–µ–π–¥–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π instancing
   */
  private createVertexShader(): string {
    return `
      struct VertexOutput {
        @builtin(position) position: vec4f,
        @location(0) color: vec4f,
        @location(1) cellCoord: vec2f,
        @location(2) cellIndex: vec2f
      };

      struct GridUniforms {
        gridSize: vec2f,
        cellSize: vec2f,
        viewportOffset: vec2f,
        viewportSize: vec2f,
        totalCells: vec2f
      }

      @group(0) @binding(0) var<uniform> gridUniforms: GridUniforms;

      @vertex
      fn vs_main(
        @builtin(vertex_index) vertexIndex: u32,
        @builtin(instance_index) instanceIndex: u32
      ) -> VertexOutput {
        var output: VertexOutput;
        
        // –°–æ–∑–¥–∞–µ–º –∫–≤–∞–¥ –∏–∑ 6 –≤–µ—Ä—à–∏–Ω (2 —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞)
        let positions = array<vec2f, 6>(
          vec2f(0.0, 0.0), vec2f(1.0, 0.0), vec2f(0.0, 1.0),
          vec2f(0.0, 1.0), vec2f(1.0, 0.0), vec2f(1.0, 1.0)
        );
        
        let pos = positions[vertexIndex];
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —è—á–µ–π–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ instance_index
        let cellsPerRow = u32(gridUniforms.totalCells.x);
        let cellX = instanceIndex % cellsPerRow;
        let cellY = instanceIndex / cellsPerRow;
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–ø–∏–∫—Å–µ–ª–∏)
        let worldPos = vec2f(
          f32(cellX) * gridUniforms.cellSize.x + gridUniforms.viewportOffset.x,
          f32(cellY) * gridUniforms.cellSize.y + gridUniforms.viewportOffset.y
        );

        // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –≤–µ—Ä—à–∏–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —è—á–µ–π–∫–∏ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ NDC
        let scaledPos = pos * gridUniforms.cellSize;
        let finalPos = worldPos + scaledPos;

        let screenPos = vec2f(
          (finalPos.x / gridUniforms.viewportSize.x) * 2.0 - 1.0,
          (finalPos.y / gridUniforms.viewportSize.y) * 2.0 - 1.0
        );

        output.position = vec4f(screenPos, 0.0, 1.0);
        output.color = vec4f(0.95, 0.95, 0.95, 1.0); // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
        output.cellCoord = pos;
        output.cellIndex = vec2f(f32(cellX), f32(cellY));
        
        return output;
      }
    `;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–Ω–æ–≥–æ —à–µ–π–¥–µ—Ä–∞
   */
  private createFragmentShader(): string {
    return `
      @fragment
      fn fs_main(
        @location(0) color: vec4f,
        @location(1) cellCoord: vec2f,
        @location(2) cellIndex: vec2f
      ) -> @location(0) vec4f {
        
        // –¢–æ–ª—å–∫–æ —Ñ–æ–Ω —è—á–µ–π–∫–∏ –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü
        let gradient = 0.98 + (cellCoord.x + cellCoord.y) * 0.01;
        return vec4f(gradient, gradient, gradient, 1.0);
      }
    `;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ uniform –±—É—Ñ–µ—Ä–∞ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Ç–∫–∏
   */
  createGridUniformBuffer(): GPUBuffer {
    const buffer = this.device.createBuffer({
      size: 64, // 16 floats * 4 bytes each
      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,
      label: 'Grid Uniform Buffer',
    });

    console.log('‚úÖ Uniform –±—É—Ñ–µ—Ä –¥–ª—è —Å–µ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω');
    return buffer;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ bind group –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Ç–∫–∏
   */
  createGridBindGroup(pipeline: GPURenderPipeline, uniformBuffer: GPUBuffer): GPUBindGroup {
    const bindGroup = this.device.createBindGroup({
      layout: pipeline.getBindGroupLayout(0),
      entries: [
        {
          binding: 0,
          resource: {
            buffer: uniformBuffer,
          },
        },
      ],
      label: 'Grid Bind Group',
    });

    console.log('‚úÖ Bind group –¥–ª—è —Å–µ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω');
    return bindGroup;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ uniform –±—É—Ñ–µ—Ä–∞
   */
  updateGridUniforms(
    uniformBuffer: GPUBuffer,
    gridSize: [number, number],
    cellSize: [number, number],
    viewportOffset: [number, number],
    viewportSize: [number, number],
    totalCells: [number, number]
  ): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–∞–º–∏
    const safeGridSize = Array.isArray(gridSize) ? gridSize : [0, 0];
    const safeCellSize = Array.isArray(cellSize) ? cellSize : [0, 0];
    const safeViewportOffset = Array.isArray(viewportOffset) ? viewportOffset : [0, 0];
    const safeViewportSize = Array.isArray(viewportSize) ? viewportSize : [0, 0];
    const safeTotalCells = Array.isArray(totalCells) ? totalCells : [0, 0];

    const data = new Float32Array([
      ...safeGridSize, // gridSize: vec2f
      ...safeCellSize, // cellSize: vec2f
      ...safeViewportOffset, // viewportOffset: vec2f
      ...safeViewportSize, // viewportSize: vec2f
      ...safeTotalCells, // totalCells: vec2f
      0.0,
      0.0, // padding
    ]);

    this.device.queue.writeBuffer(uniformBuffer, 0, data);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
   */
  createTextPipeline(): GPURenderPipeline {
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞...');

    // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–∞–π–ø–ª–∞–π–Ω
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç-—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
    return this.createGridPipeline();
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫
   */
  createSelectionPipeline(): GPURenderPipeline {
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è...');

    const vertexShader = `
      struct VertexOutput {
        @builtin(position) position: vec4f,
        @location(0) color: vec4f
      };

      @vertex
      fn vs_main(@builtin(vertex_index) vertexIndex: u32) -> VertexOutput {
        var output: VertexOutput;
        
        let positions = array<vec2f, 6>(
          vec2f(0.0, 0.0), vec2f(1.0, 0.0), vec2f(0.0, 1.0),
          vec2f(0.0, 1.0), vec2f(1.0, 0.0), vec2f(1.0, 1.0)
        );
        
        let pos = positions[vertexIndex];
        output.position = vec4f(pos * 2.0 - 1.0, 0.0, 1.0);
        output.color = vec4f(0.0, 0.5, 1.0, 0.3); // –°–∏–Ω–µ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        
        return output;
      }
    `;

    const fragmentShader = `
      @fragment
      fn fs_main(@location(0) color: vec4f) -> @location(0) vec4f {
        return color;
      }
    `;

    const shaderModule = this.device.createShaderModule({
      code: `${vertexShader}\n\n${fragmentShader}`,
      label: 'Selection Pipeline Shader',
    });

    const pipeline = this.device.createRenderPipeline({
      layout: 'auto',
      vertex: {
        module: shaderModule,
        entryPoint: 'vs_main',
        buffers: [],
      },
      fragment: {
        module: shaderModule,
        entryPoint: 'fs_main',
        targets: [
          {
            format: 'bgra8unorm',
          },
        ],
      },
      primitive: {
        topology: 'triangle-list',
      },
      label: 'Selection Render Pipeline',
    });

    console.log('‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω');
    return pipeline;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≥—Ä–∞–Ω–∏—Ü —è—á–µ–µ–∫
   */
  createBorderPipeline(): GPURenderPipeline {
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –≥—Ä–∞–Ω–∏—Ü...');

    const vertexShader = `
      struct VertexOutput {
        @builtin(position) position: vec4f,
        @location(0) cellCoord: vec2f,
        @location(1) cellIndex: vec2f
      };

      struct GridUniforms {
        gridSize: vec2f,
        cellSize: vec2f,
        viewportOffset: vec2f,
        viewportSize: vec2f,
        totalCells: vec2f
      }

      @group(0) @binding(0) var<uniform> gridUniforms: GridUniforms;

      @vertex
      fn vs_main(
        @location(0) position: vec2f,
        @builtin(instance_index) instanceIndex: u32
      ) -> VertexOutput {
        var output: VertexOutput;

        // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —è—á–µ–π–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ instance_index
        let cellsPerRow = u32(gridUniforms.totalCells.x);
        let cellX = instanceIndex % cellsPerRow;
        let cellY = instanceIndex / cellsPerRow;

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–ø–∏–∫—Å–µ–ª–∏)
        let worldPos = vec2f(
          f32(cellX) * gridUniforms.cellSize.x + gridUniforms.viewportOffset.x,
          f32(cellY) * gridUniforms.cellSize.y + gridUniforms.viewportOffset.y
        );

        // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –≤–µ—Ä—à–∏–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —è—á–µ–π–∫–∏
        let scaledPos = position * gridUniforms.cellSize;
        let finalPos = worldPos + scaledPos;

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–∫—Ä–∞–Ω–∞ (-1 –¥–æ 1)
        let screenPos = vec2f(
          (finalPos.x / gridUniforms.viewportSize.x) * 2.0 - 1.0,
          (finalPos.y / gridUniforms.viewportSize.y) * 2.0 - 1.0
        );

        output.position = vec4f(screenPos, 0.0, 1.0);
        output.cellCoord = position;
        output.cellIndex = vec2f(f32(cellX), f32(cellY));

        return output;
      }
    `;

    const fragmentShader = `
      @fragment
      fn fs_main(
        @location(0) cellCoord: vec2f,
        @location(1) cellIndex: vec2f
      ) -> @location(0) vec4f {
        
        // –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å —Ç–æ–ª—â–∏–Ω–æ–π 1px: –ø—Ä–∞–≤—ã–µ/–Ω–∏–∂–Ω–∏–µ –≤—Å–µ–≥–¥–∞,
        // –≤–µ—Ä—Ö/–ª–µ–≤–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏/–∫–æ–ª–æ–Ω–∫–∏
        let borderPx = 1.0;
        let normalizedBorderX = borderPx / gridUniforms.cellSize.x;
        let normalizedBorderY = borderPx / gridUniforms.cellSize.y;

        let isRightBorder = cellCoord.x > 1.0 - normalizedBorderX;
        let isBottomBorder = cellCoord.y > 1.0 - normalizedBorderY;
        let isTopBorder = (cellIndex.y == 0.0) && (cellCoord.y < normalizedBorderY);
        let isLeftBorder = (cellIndex.x == 0.0) && (cellCoord.x < normalizedBorderX);

        if (isRightBorder || isBottomBorder || isTopBorder || isLeftBorder) {
          return vec4f(0.0, 0.0, 0.0, 1.0);
        }

        // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –≥—Ä–∞–Ω–∏—Ü
        return vec4f(0.0, 0.0, 0.0, 0.0);
      }
    `;

    const shaderModule = this.device.createShaderModule({
      code: vertexShader + fragmentShader,
      label: 'Border Shader Module',
    });

    const pipeline = this.device.createRenderPipeline({
      layout: 'auto',
      vertex: {
        module: shaderModule,
        entryPoint: 'vs_main',
        buffers: [
          {
            arrayStride: 8, // 2 floats * 4 bytes
            attributes: [
              {
                format: 'float32x2',
                offset: 0,
                shaderLocation: 0,
              },
            ],
          },
        ],
      },
      fragment: {
        module: shaderModule,
        entryPoint: 'fs_main',
        targets: [
          {
            format: 'bgra8unorm',
            blend: {
              color: {
                srcFactor: 'src-alpha',
                dstFactor: 'one-minus-src-alpha',
                operation: 'add',
              },
              alpha: {
                srcFactor: 'src-alpha',
                dstFactor: 'one-minus-src-alpha',
                operation: 'add',
              },
            },
          },
        ],
      },
      primitive: {
        topology: 'triangle-list',
      },
      label: 'Border Render Pipeline',
    });

    console.log('‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –¥–ª—è –≥—Ä–∞–Ω–∏—Ü —Å–æ–∑–¥–∞–Ω');
    return pipeline;
  }
}
