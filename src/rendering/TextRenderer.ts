/**
 * TextRenderer - –∫–ª–∞—Å—Å –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —è—á–µ–π–∫–∞—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Canvas 2D
 */

import type { Cell, Viewport } from '../types/index.js';

export class TextRenderer {
  private canvas: HTMLCanvasElement;
  private ctx: CanvasRenderingContext2D;
  private cellWidth: number;
  private cellHeight: number;

  constructor(canvas: HTMLCanvasElement, cellWidth: number = 80, cellHeight: number = 25) {
    this.canvas = canvas;
    this.cellWidth = cellWidth;
    this.cellHeight = cellHeight;

    // –ü–æ–ª—É—á–∞–µ–º 2D –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = canvas.getContext('2d');
    if (!ctx) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å 2D –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞');
    }
    this.ctx = ctx;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–∞
    this.ctx.font = '12px Arial';
    this.ctx.textAlign = 'left';
    this.ctx.textBaseline = 'middle';

    console.log('üìù TextRenderer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', {
      canvasSize: `${canvas.width}x${canvas.height}`,
      cellSize: `${cellWidth}x${cellHeight}`,
    });
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–∏–º—ã—Ö —è—á–µ–µ–∫
   */
  render(cells: Cell[], viewport: Viewport): void {
    // –û—á–∏—â–∞–µ–º canvas
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

    const startCol = viewport.startCol || 0;
    const startRow = viewport.startRow || 0;

    console.log('üìù –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —è—á–µ–µ–∫:', {
      cellsCount: cells.length,
      viewport: `${startCol}-${viewport.endCol}, ${startRow}-${viewport.endRow}`,
    });

    // –†–µ–Ω–¥–µ—Ä–∏–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
    cells.forEach(cell => {
      if (cell.value && String(cell.value).trim()) {
        this.renderCellText(cell, startCol, startRow);
      }
    });
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –≤ –æ–¥–Ω–æ–π —è—á–µ–π–∫–µ
   */
  private renderCellText(cell: Cell, startCol: number, startRow: number): void {
    // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —è—á–µ–π–∫–∏ —Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏–π (–∫–∞–∫ –≤ —Å–µ—Ç–∫–µ)
    const x = 30 + (cell.col - startCol) * this.cellWidth; // +30px —Å–ª–µ–≤–∞ –∫–∞–∫ –≤ —Å–µ—Ç–∫–µ
    const y = 25 + (cell.row - startRow) * this.cellHeight; // +25px —Å–≤–µ—Ä—Ö—É –∫–∞–∫ –≤ —Å–µ—Ç–∫–µ

    // –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–Ω—É—Ç—Ä–∏ —è—á–µ–π–∫–∏
    const textX = x + 4; // 4px –æ—Ç—Å—Ç—É–ø –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
    const textY = y + this.cellHeight / 2; // –ø–æ —Ü–µ–Ω—Ç—Ä—É –ø–æ –≤—ã—Å–æ—Ç–µ

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–∞ –∏ —Å—Ç–∏–ª—è
    this.ctx.fillStyle = '#333'; // –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π —Ç–µ–∫—Å—Ç
    this.ctx.font = '12px Arial';

    // –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    const maxWidth = this.cellWidth - 8; // -8px –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤
    const text = String(cell.value);
    const truncatedText = this.truncateText(text, maxWidth);

    // –†–µ–Ω–¥–µ—Ä–∏–º —Ç–µ–∫—Å—Ç
    this.ctx.fillText(truncatedText, textX, textY);

    console.log(
      `üìù –û—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω —Ç–µ–∫—Å—Ç "${truncatedText}" –≤ —è—á–µ–π–∫–µ ${cell.row},${cell.col} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${textX},${textY}`
    );
  }

  /**
   * –û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ —è—á–µ–π–∫—É
   */
  private truncateText(text: string, maxWidth: number): string {
    const metrics = this.ctx.measureText(text);
    if (metrics.width <= maxWidth) {
      return text;
    }

    // –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º "..."
    let truncated = text;
    while (truncated.length > 0) {
      truncated = truncated.slice(0, -1);
      const testText = truncated + '...';
      const testMetrics = this.ctx.measureText(testText);
      if (testMetrics.width <= maxWidth) {
        return testText;
      }
    }

    return '...';
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ canvas
   */
  updateCanvasSize(width: number, height: number): void {
    console.log(`üìù TextRenderer: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ canvas ${width}x${height}`);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
   */
  getTextAreaSize(): { width: number; height: number } {
    return {
      width: this.cellWidth - 8, // -8px –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤
      height: this.cellHeight,
    };
  }
}
