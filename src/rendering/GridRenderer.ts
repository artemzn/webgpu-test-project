/**
 * GridRenderer - –∫–ª–∞—Å—Å –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º WebGPU
 */

import type { Cell, Viewport, WebGPUConfig } from '../types/index.js';
import { RenderManager } from './webgpu-setup/RenderManager.js';

export class GridRenderer {
  private renderManager: RenderManager;

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  private cellWidth: number;
  private cellHeight: number;
  private gridColor: [number, number, number, number] = [0.9, 0.9, 0.9, 1.0];
  private borderColor: [number, number, number, number] = [0.7, 0.7, 0.7, 1.0];
  private backgroundColor: [number, number, number, number] = [1.0, 1.0, 1.0, 1.0];

  // –ö–µ—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  private lastViewport: Viewport | null = null;
  private lastVisibleCells: Cell[] | null = null;
  private needsRedraw = true;

  constructor(
    config: WebGPUConfig,
    canvas: HTMLCanvasElement,
    cellWidth: number,
    cellHeight: number
  ) {
    this.cellWidth = cellWidth;
    this.cellHeight = cellHeight;

    this.renderManager = new RenderManager(config, canvas);

    console.log('üé® GridRenderer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', {
      cellSize: `${cellWidth}x${cellHeight}`,
      canvasSize: `${canvas.width}x${canvas.height}`,
    });
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
   */
  async initialize(): Promise<void> {
    try {
      console.log('üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GridRenderer...');

      await this.renderManager.initialize();

      console.log('‚úÖ GridRenderer –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GridRenderer:', error);
      throw error;
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–µ—Ç–∫–∏
   */
  render(visibleCells: Cell[], viewport: Viewport, selectedCell?: any): Promise<void> {
    return new Promise((resolve, reject) => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å
        const needsMainRender = this.needsRedraw || !this.viewportUnchanged(viewport);
        const needsSelectionRender = selectedCell !== null;

        // –í–°–ï–ì–î–ê —Ä–µ–Ω–¥–µ—Ä–∏–º –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏–ª–∏ –Ω—É–∂–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä
        if (needsMainRender || needsSelectionRender) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
          if (needsMainRender) {
            this.lastViewport = { ...viewport };
            this.lastVisibleCells = Array.isArray(visibleCells) ? [...visibleCells] : [];
            this.needsRedraw = false;
          }

          // –†–µ–Ω–¥–µ—Ä–∏–º —á–µ—Ä–µ–∑ RenderManager —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –≤ —Ç–æ–º –∂–µ render pass
          this.renderManager.render(visibleCells, viewport, selectedCell);

          console.log(
            `üéØ GridRenderer: needsMainRender=${needsMainRender}, needsSelectionRender=${needsSelectionRender}, selectedCell=${selectedCell ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}, cache=${this.viewportUnchanged(viewport) ? 'HIT' : 'MISS'}`
          );
        }
        resolve();
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∫–∏:', error);
        reject(error);
      }
    });
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—ã–¥–µ–ª–µ–Ω–∏—è —è—á–µ–π–∫–∏
   */
  async renderSelection(selectedCell: Cell | null): Promise<void> {
    if (!selectedCell) return;

    try {
      await this.renderManager.renderSelection(selectedCell);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —è—á–µ–µ–∫
   */
  setCellSize(width: number, height: number): void {
    this.cellWidth = width;
    this.cellHeight = height;
    this.needsRedraw = true;

    console.log(`üé® –†–∞–∑–º–µ—Ä —è—á–µ–µ–∫ –∏–∑–º–µ–Ω–µ–Ω: ${width}x${height}`);
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–æ–≤
   */
  setColors(
    gridColor?: [number, number, number, number],
    borderColor?: [number, number, number, number],
    backgroundColor?: [number, number, number, number]
  ): void {
    if (gridColor) {
      this.gridColor = gridColor;
    }
    if (borderColor) {
      this.borderColor = borderColor;
    }
    if (backgroundColor) {
      this.backgroundColor = backgroundColor;
    }

    this.needsRedraw = true;

    console.log('üé® –¶–≤–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', {
      grid: this.gridColor,
      border: this.borderColor,
      background: this.backgroundColor,
    });
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
   */
  forceRedraw(): void {
    this.needsRedraw = true;
    this.lastViewport = null;
    this.lastVisibleCells = null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
   */
  getRenderStats(): {
    lastViewport: Viewport | null;
    visibleCellsCount: number;
    needsRedraw: boolean;
    cellSize: { width: number; height: number };
  } {
    return {
      lastViewport: this.lastViewport,
      visibleCellsCount: this.lastVisibleCells?.length || 0,
      needsRedraw: this.needsRedraw,
      cellSize: { width: this.cellWidth, height: this.cellHeight },
    };
  }

  /**
   * Alias –¥–ª—è getRenderStats (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ—Å—Ç–∞–º–∏)
   */
  getRenderingStats(): {
    lastRenderTime: number;
    visibleCellsCount: number;
    needsRedraw: boolean;
    cellSize: { width: number; height: number };
  } {
    const stats = this.getRenderStats();
    return {
      lastRenderTime: 0, // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
      visibleCellsCount: stats.visibleCellsCount,
      needsRedraw: stats.needsRedraw,
      cellSize: stats.cellSize,
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è viewport
   */
  private viewportUnchanged(viewport: Viewport): boolean {
    if (!this.lastViewport) return false;

    return (
      this.lastViewport.startRow === viewport.startRow &&
      this.lastViewport.startCol === viewport.startCol &&
      this.lastViewport.endRow === viewport.endRow &&
      this.lastViewport.endCol === viewport.endCol
    );
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  dispose(): void {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ GridRenderer...');

    this.renderManager.dispose();
    this.lastViewport = null;
    this.lastVisibleCells = null;

    console.log('‚úÖ GridRenderer –æ—á–∏—â–µ–Ω');
  }
}
