/**
 * HeaderRenderer - —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ —Å—Ç—Ä–æ–∫ –Ω–∞ Canvas 2D
 */

export class HeaderRenderer {
  private canvas: HTMLCanvasElement;
  private ctx: CanvasRenderingContext2D;
  private cellWidth: number;
  private cellHeight: number;
  private headerWidth: number = 30; // –®–∏—Ä–∏–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç—Ä–æ–∫
  private headerHeight: number; // –í—ã—Å–æ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤

  constructor(canvas: HTMLCanvasElement, cellWidth: number = 80, cellHeight: number = 25) {
    this.canvas = canvas;
    this.cellWidth = cellWidth;
    this.cellHeight = cellHeight;
    this.headerHeight = cellHeight - 5; // –í–´–°–û–¢–ê –ó–ê–ì–û–õ–û–í–ö–ê = –í–´–°–û–¢–ê –Ø–ß–ï–ô–ö–ò

    // –ü–æ–ª—É—á–∞–µ–º 2D –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = canvas.getContext('2d');
    if (!ctx) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å 2D –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤');
    }
    this.ctx = ctx;

    console.log('üìù HeaderRenderer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', {
      canvasSize: `${canvas.width}x${canvas.height}`,
      cellSize: `${cellWidth}x${cellHeight}`,
      headerSize: `${this.headerWidth}x${this.headerHeight}`,
    });
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ —Å—Ç—Ä–æ–∫
   */
  render(viewport: any): void {
    // –û—á–∏—â–∞–µ–º canvas
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

    const startCol = viewport.startCol || 0;
    const endCol = viewport.endCol || 24;
    const startRow = viewport.startRow || 0;
    const endRow = viewport.endRow || 32;

    console.log('üìù –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:', {
      columns: `${startCol}-${endCol}`,
      rows: `${startRow}-${endRow}`,
    });

    // –†–µ–Ω–¥–µ—Ä–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ (A, B, C...)
    this.renderColumnHeaders(startCol, endCol);

    // –†–µ–Ω–¥–µ—Ä–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç—Ä–æ–∫ (1, 2, 3...)
    this.renderRowHeaders(startRow, endRow);

    // –†–µ–Ω–¥–µ—Ä–∏–º —É–≥–ª–æ–≤–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
    this.renderCornerHeader();
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤ (A, B, C...)
   */
  private renderColumnHeaders(startCol: number, endCol: number): void {
    this.ctx.fillStyle = '#f0f0f0'; // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
    this.ctx.strokeStyle = '#ccc'; // –°–µ—Ä—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
    this.ctx.lineWidth = 1;
    this.ctx.font = '12px Arial';
    this.ctx.textAlign = 'center';
    this.ctx.textBaseline = 'middle';

    for (let col = startCol; col < endCol; col++) {
      // –¢–û–ß–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï —Å —Å–µ—Ç–∫–æ–π: +30px —Å–ª–µ–≤–∞
      const x = 30 + (col - startCol) * this.cellWidth;
      const y = 0;
      const width = this.cellWidth;
      const height = this.headerHeight;

      // –†–∏—Å—É–µ–º —Ñ–æ–Ω –∑–∞–≥–æ–ª–æ–≤–∫–∞
      this.ctx.fillRect(x, y, width, height);
      this.ctx.strokeRect(x, y, width, height);

      // –†–∏—Å—É–µ–º –±—É–∫–≤—É (A, B, C...)
      const letter = this.indexToColumnLetter(col);
      this.ctx.fillStyle = '#333';
      this.ctx.fillText(letter, x + width / 2, y + height / 2);
      this.ctx.fillStyle = '#f0f0f0'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç—Ä–æ–∫ (1, 2, 3...)
   */
  private renderRowHeaders(startRow: number, endRow: number): void {
    this.ctx.fillStyle = '#f0f0f0'; // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
    this.ctx.strokeStyle = '#ccc'; // –°–µ—Ä—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
    this.ctx.lineWidth = 1;
    this.ctx.font = '12px Arial';
    this.ctx.textAlign = 'center';
    this.ctx.textBaseline = 'middle';

    for (let row = startRow; row < endRow; row++) {
      const x = 0;
      // –í–û–ó–í–†–ê–©–ê–ï–ú –°–ú–ï–©–ï–ù–ò–ï: +25px —Å–≤–µ—Ä—Ö—É –∫–∞–∫ —É —Å–µ—Ç–∫–∏
      const y = 20 + (row - startRow) * this.cellHeight;
      const width = this.headerWidth;
      // –ü–û–î–°–¢–†–ê–ò–í–ê–ï–ú –í–´–°–û–¢–£ –ø–æ–¥ —è—á–µ–π–∫–∏
      const height = this.cellHeight;

      // –†–∏—Å—É–µ–º —Ñ–æ–Ω –∑–∞–≥–æ–ª–æ–≤–∫–∞
      this.ctx.fillRect(x, y, width, height);
      this.ctx.strokeRect(x, y, width, height);

      // –†–∏—Å—É–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (1, 2, 3...)
      const number = (row + 1).toString();
      this.ctx.fillStyle = '#333';
      this.ctx.fillText(number, x + width / 2, y + height / 2);
      this.ctx.fillStyle = '#f0f0f0'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —É–≥–ª–æ–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
   */
  private renderCornerHeader(): void {
    this.ctx.fillStyle = '#e0e0e0'; // –ß—É—Ç—å —Ç–µ–º–Ω–µ–µ —Å–µ—Ä—ã–π
    this.ctx.strokeStyle = '#ccc';
    this.ctx.lineWidth = 1;

    const x = 0;
    const y = 0;
    const width = this.headerWidth;
    const height = this.headerHeight;

    // –†–∏—Å—É–µ–º —Ñ–æ–Ω —É–≥–ª–æ–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    this.ctx.fillRect(x, y, width, height);
    this.ctx.strokeRect(x, y, width, height);
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç–æ–ª–±—Ü–∞ –≤ –±—É–∫–≤—É (0 -> A, 1 -> B, ..., 25 -> Z, 26 -> AA)
   */
  private indexToColumnLetter(index: number): string {
    let result = '';
    while (index >= 0) {
      result = String.fromCharCode(65 + (index % 26)) + result;
      index = Math.floor(index / 26) - 1;
    }
    return result;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —è—á–µ–µ–∫
   */
  updateCellSize(cellWidth: number, cellHeight: number): void {
    this.cellWidth = cellWidth;
    this.cellHeight = cellHeight;
    console.log('üìù HeaderRenderer: —Ä–∞–∑–º–µ—Ä—ã —è—á–µ–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', `${cellWidth}x${cellHeight}`);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ canvas
   */
  updateCanvasSize(width: number, height: number): void {
    this.canvas.width = width;
    this.canvas.height = height;
    console.log('üìù HeaderRenderer: —Ä–∞–∑–º–µ—Ä canvas –æ–±–Ω–æ–≤–ª–µ–Ω:', `${width}x${height}`);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
   */
  getHeaderDimensions(): { width: number; height: number } {
    return {
      width: this.headerWidth,
      height: this.headerHeight,
    };
  }
}
