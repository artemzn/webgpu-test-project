/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è WebGPU Excel
 */

import type { AppConfig, InitializationResult } from './types/index.js';
import { WebGPUDeviceManager } from './rendering/webgpu-setup/DeviceManager.js';
import { RenderManager } from './rendering/webgpu-setup/RenderManager.js';
import { GridRenderer } from './rendering/GridRenderer.js';
import { VirtualGrid } from './core/virtual-grid/VirtualGrid.js';
import { SparseMatrix } from './core/sparse-matrix/SparseMatrix.js';

export class App {
  private config: AppConfig;
  private canvas: HTMLCanvasElement;
  private webgpuManager: WebGPUDeviceManager | null = null;
  private renderManager: RenderManager | null = null;
  private gridRenderer: GridRenderer | null = null;
  private virtualGrid: VirtualGrid | null = null;
  private sparseMatrix: SparseMatrix | null = null;
  private isInitialized = false;

  // FPS tracking
  private frameCount = 0;
  private fps = 0;
  private lastFpsUpdate = 0;
  private needsRender = true;

  constructor(config: AppConfig) {
    this.config = config;
    this.canvas = this.getCanvas();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  async initialize(): Promise<void> {
    try {
      // 0. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä canvas
      this.setupCanvas();

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É WebGPU
      if (this.config.enableWebGPU) {
        await this.initializeWebGPU();
      }

      // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É
      this.initializeVirtualGrid();

      // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
      this.initializeSparseMatrix();

      // 4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.setupEventHandlers();

      // 5. –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
      this.startRendering();

      this.isInitialized = true;
      this.lastFpsUpdate = performance.now();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ FPS
      this.updateFPSDisplay();

      console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebGPU
   */
  private async initializeWebGPU(): Promise<void> {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebGPU...');

    this.webgpuManager = new WebGPUDeviceManager();
    const result: InitializationResult = await this.webgpuManager.initialize(this.canvas);

    if (!result.success || !result.config) {
      throw new Error(`WebGPU –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: ${result.error}`);
    }

    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    this.renderManager = new RenderManager(
      result.config,
      this.canvas,
      this.config.cellWidth,
      this.config.cellHeight
    );
    await this.renderManager.initialize();

    // –°–æ–∑–¥–∞–µ–º GridRenderer –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∫–∏
    this.gridRenderer = new GridRenderer(
      result.config,
      this.canvas,
      this.config.cellWidth,
      this.config.cellHeight
    );
    await this.gridRenderer.initialize();

    console.log('‚úÖ WebGPU, —Ä–µ–Ω–¥–µ—Ä-–ø–∞–π–ø–ª–∞–π–Ω –∏ GridRenderer —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å–µ—Ç–∫–∏
   */
  private initializeVirtualGrid(): void {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å–µ—Ç–∫–∏...');

    this.virtualGrid = new VirtualGrid(
      this.canvas.width,
      this.canvas.height,
      this.config.cellWidth,
      this.config.cellHeight,
      this.config.maxRows,
      this.config.maxCols
    );

    console.log('‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å–µ—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
   */
  private initializeSparseMatrix(): void {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã...');

    this.sparseMatrix = new SparseMatrix();

    console.log('‚úÖ –†–∞–∑—Ä–µ–∂–µ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  private setupEventHandlers(): void {
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    this.setupToolbarHandlers();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–Ω–µ–ª–∏ —Ñ–æ—Ä–º—É–ª
    this.setupFormulaBarHandlers();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ canvas
    this.setupCanvasHandlers();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    this.setupKeyboardHandlers();

    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
   */
  private setupToolbarHandlers(): void {
    const toolbarButtons = document.querySelectorAll('.toolbar-button[data-action]');

    toolbarButtons.forEach(button => {
      button.addEventListener('click', event => {
        const action = (event.target as HTMLElement).getAttribute('data-action');
        this.handleToolbarAction(action);
      });
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–∞–Ω–µ–ª–∏ —Ñ–æ—Ä–º—É–ª
   */
  private setupFormulaBarHandlers(): void {
    const formulaInput = document.getElementById('formula-input') as HTMLInputElement;
    const enterButton = document.querySelector('[data-action="enter"]') as HTMLButtonElement;

    if (formulaInput) {
      formulaInput.addEventListener('keydown', event => {
        if (event.key === 'Enter') {
          this.handleFormulaSubmit(formulaInput.value);
        }
      });
    }

    if (enterButton) {
      enterButton.addEventListener('click', () => {
        if (formulaInput) {
          this.handleFormulaSubmit(formulaInput.value);
        }
      });
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ canvas
   */
  private setupCanvasHandlers(): void {
    this.canvas.addEventListener('click', event => {
      this.handleCanvasClick(event);
    });

    this.canvas.addEventListener('mousemove', event => {
      this.handleCanvasMouseMove(event);
    });

    this.canvas.addEventListener('wheel', event => {
      this.handleCanvasWheel(event);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    this.canvas.addEventListener('contextmenu', event => {
      event.preventDefault();
      this.showContextMenu(event);
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    document.addEventListener('click', () => {
      this.hideContextMenu();
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    this.setupContextMenuHandlers();
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
   */
  private setupKeyboardHandlers(): void {
    document.addEventListener('keydown', event => {
      this.handleKeyDown(event);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–∫—É—Å–∞ –Ω–∞ canvas –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    this.canvas.tabIndex = 0; // –î–µ–ª–∞–µ–º canvas focusable
    this.canvas.addEventListener('focus', () => {
      console.log('üéØ Canvas –ø–æ–ª—É—á–∏–ª —Ñ–æ–∫—É—Å');
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
   */
  private handleToolbarAction(action: string | null): void {
    if (!action) return;

    console.log(`üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è: ${action}`);

    switch (action) {
      case 'new':
        this.createNewSpreadsheet();
        break;
      case 'open':
        this.openSpreadsheet();
        break;
      case 'save':
        this.saveSpreadsheet();
        break;
      case 'undo':
        this.undo();
        break;
      case 'redo':
        this.redo();
        break;
      case 'copy':
        this.copy();
        break;
      case 'paste':
        this.paste();
        break;
      default:
        console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—É–ª—ã
   */
  private handleFormulaSubmit(formula: string): void {
    console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—É–ª—ã: ${formula}`);

    if (this.virtualGrid && this.sparseMatrix) {
      const activeCell = this.virtualGrid.getActiveCell();
      if (activeCell) {
        this.sparseMatrix.setCell(activeCell.row, activeCell.col, formula);
        this.updateDisplay();
        this.needsRender = true; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ canvas
   */
  private handleCanvasClick(event: MouseEvent): void {
    if (!this.virtualGrid) return;

    const rect = this.canvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;

    const cell = this.virtualGrid.getCellAtPosition(x, y);
    if (cell) {
      this.virtualGrid.setActiveCell(cell);
      this.updateFormulaBar(cell);
      this.updateStatusBar();

      // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–∞ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ (–≤—ã–¥–µ–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º render)
      this.needsRender = true;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –ø–æ canvas
   */
  private handleCanvasMouseMove(event: MouseEvent): void {
    if (!this.virtualGrid) return;

    const rect = this.canvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;

    const cell = this.virtualGrid.getCellAtPosition(x, y);
    if (cell) {
      // –ò–∑–º–µ–Ω—è–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ pointer –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ —è—á–µ–π–∫—É
      this.canvas.style.cursor = 'pointer';

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è—á–µ–π–∫–µ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
      (this as any).hoveredCell = cell;
    } else {
      this.canvas.style.cursor = 'default';
      (this as any).hoveredCell = null;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏
   */
  private handleCanvasWheel(event: WheelEvent): void {
    event.preventDefault();

    if (!this.virtualGrid) return;

    const delta = event.deltaY;
    if (delta > 0) {
      this.virtualGrid.scrollDown();
    } else {
      this.virtualGrid.scrollUp();
    }

    this.updateDisplay();
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
   */
  private startRendering(): void {
    console.log('üé® –ó–∞–ø—É—Å–∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞...');

    const render = (currentTime: number) => {
      this.updateFPS(currentTime);

      // –†–µ–Ω–¥–µ—Ä–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (this.needsRender) {
        this.render();
        this.needsRender = false;
      }

      requestAnimationFrame(render);
    };

    requestAnimationFrame(render);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ FPS
   */
  private updateFPS(currentTime: number): void {
    this.frameCount++;

    if (currentTime - this.lastFpsUpdate >= 1000) {
      this.fps = Math.round((this.frameCount * 1000) / (currentTime - this.lastFpsUpdate));
      this.frameCount = 0;
      this.lastFpsUpdate = currentTime;

      // –û–±–Ω–æ–≤–ª—è–µ–º FPS –≤ UI
      this.updateFPSDisplay();
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞–¥—Ä–∞
   */
  private render(): void {
    if (!this.isInitialized || !this.virtualGrid) return;

    // –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–∏–º—ã–µ —è—á–µ–π–∫–∏
    const visibleCells = this.virtualGrid.getVisibleCells();

    // –†–µ–Ω–¥–µ—Ä–∏–º —á–µ—Ä–µ–∑ WebGPU –∏–ª–∏ Canvas 2D
    if (this.webgpuManager) {
      this.renderWithWebGPU(visibleCells);
    } else {
      this.renderWithCanvas2D(visibleCells);
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ WebGPU —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GridRenderer
   */
  private renderWithWebGPU(cells: any[]): void {
    if (!this.gridRenderer || !this.virtualGrid) return;

    try {
      // –ü–æ–ª—É—á–∞–µ–º viewport –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
      const viewport = this.virtualGrid.getViewport();

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —è—á–µ–π–∫—É –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
      const activeCell = this.virtualGrid.getActiveCell();
      let selectedCellData = null;

      if (activeCell) {
        selectedCellData = {
          row: activeCell.row,
          col: activeCell.col,
          value: null,
          screenX: (activeCell.col - viewport.startCol) * this.config.cellWidth,
          screenY: (activeCell.row - viewport.startRow) * this.config.cellHeight,
          width: this.config.cellWidth,
          height: this.config.cellHeight,
        };

        const isVisible =
          activeCell.col >= viewport.startCol &&
          activeCell.col <= viewport.endCol &&
          activeCell.row >= viewport.startRow &&
          activeCell.row <= viewport.endRow;

        console.log(
          `üéØ APP –û–¢–õ–ê–î–ö–ê: activeCell=${JSON.stringify(activeCell)}, viewport=${JSON.stringify(viewport)}, selectedCellData=${JSON.stringify(selectedCellData)}, –í–ò–î–ò–ú–ê–Ø=${isVisible}`
        );
      } else {
        console.log(`üéØ APP –û–¢–õ–ê–î–ö–ê: –ù–ï–¢ –ê–ö–¢–ò–í–ù–û–ô –Ø–ß–ï–ô–ö–ò!`);
      }

      // –†–µ–Ω–¥–µ—Ä–∏–º —á–µ—Ä–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π GridRenderer —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
      this.gridRenderer.render(cells, viewport, selectedCellData);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ WebGPU —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:', error);
      // Fallback –Ω–∞ Canvas 2D
      this.renderWithCanvas2D(cells);
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ Canvas 2D
   */
  private renderWithCanvas2D(cells: any[]): void {
    const ctx = this.canvas.getContext('2d');
    if (!ctx) return;

    // –û—á–∏—â–∞–µ–º canvas
    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —Ä–µ–Ω–¥–µ—Ä–∏–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ —è—á–µ–π–∫–∏
    if (cells.length > 0) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –æ–¥–∏–Ω —Ä–∞–∑
      ctx.font = '12px Arial';
      ctx.textBaseline = 'top';

      // –†–µ–Ω–¥–µ—Ä–∏–º —è—á–µ–π–∫–∏ –±–∞—Ç—á–∞–º–∏
      cells.forEach(cell => {
        this.renderCell2D(ctx, cell);
      });
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —è—á–µ–π–∫–∏ —á–µ—Ä–µ–∑ Canvas 2D
   */
  private renderCell2D(ctx: CanvasRenderingContext2D, cell: any): void {
    // –§–æ–Ω —è—á–µ–π–∫–∏
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(cell.screenX, cell.screenY, cell.width, cell.height);

    // –ì—Ä–∞–Ω–∏—Ü—ã —è—á–µ–π–∫–∏
    ctx.strokeStyle = '#e0e0e0';
    ctx.lineWidth = 1;
    ctx.strokeRect(cell.screenX, cell.screenY, cell.width, cell.height);

    // –¢–µ–∫—Å—Ç —è—á–µ–π–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ)
    if (cell.value && String(cell.value).trim()) {
      ctx.fillStyle = '#000000';
      ctx.fillText(String(cell.value), cell.screenX + 4, cell.screenY + 18);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private updateDisplay(): void {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å-–±–∞—Ä
    this.updateStatusBar();

    // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–∞ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ (–≤–∫–ª—é—á–∞—è –≤—ã–¥–µ–ª–µ–Ω–∏–µ)
    this.needsRender = true;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ñ–æ—Ä–º—É–ª
   */
  private updateFormulaBar(cell: any): void {
    const formulaInput = document.getElementById('formula-input') as HTMLInputElement;
    if (formulaInput && this.sparseMatrix) {
      const value = this.sparseMatrix.getCell(cell.row, cell.col);
      formulaInput.value = value || '';
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —è—á–µ–π–∫–µ
   */
  private updateCellInfo(cell: any): void {
    const cellInfo = document.getElementById('cell-info');
    if (cellInfo) {
      const colName = this.getColumnName(cell.col);
      cellInfo.textContent = `${colName}${cell.row + 1}`;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞
   */
  private updateStatusBar(): void {
    const cellInfo = document.getElementById('cell-info');
    const statusText = document.getElementById('status-text');

    if (this.virtualGrid) {
      const activeCell = this.virtualGrid.getActiveCell();
      if (activeCell && cellInfo) {
        const colName = this.getColumnName(activeCell.col);
        const rowName = (activeCell.row + 1).toString();
        cellInfo.textContent = `${colName}${rowName}`;
      }
    }

    if (statusText) {
      statusText.textContent = '–ì–æ—Ç–æ–≤';
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è FPS
   */
  private updateFPSDisplay(): void {
    const fpsElement = document.getElementById('performance-info');
    if (fpsElement) {
      fpsElement.textContent = `FPS: ${this.fps}`;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å—Ç–æ–ª–±—Ü–∞
   */
  private getColumnName(col: number): string {
    let result = '';
    while (col >= 0) {
      result = String.fromCharCode(65 + (col % 26)) + result;
      col = Math.floor(col / 26) - 1;
    }
    return result;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ canvas —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  private getCanvas(): HTMLCanvasElement {
    const canvas = document.getElementById('spreadsheet-canvas') as HTMLCanvasElement;
    if (!canvas) {
      throw new Error('Canvas —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    return canvas;
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ canvas
   */
  private setupCanvas(): void {
    this.updateCanvasSize(); // –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
    window.addEventListener('resize', () => {
      this.updateCanvasSize();
    });

    // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
    window.addEventListener('orientationchange', () => {
      setTimeout(() => this.updateCanvasSize(), 100); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ - –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ layout –º–µ–Ω—è–µ—Ç—Å—è
    const resizeObserver = new ResizeObserver(() => {
      this.updateCanvasSize();
    });

    const container = this.canvas.parentElement;
    if (container) {
      resizeObserver.observe(container);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ canvas –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
   */
  private updateCanvasSize(): void {
    const container = this.canvas.parentElement;
    if (!container) return;

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º layout –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    requestAnimationFrame(() => {
      const containerRect = container.getBoundingClientRect();
      let width = Math.floor(containerRect.width);
      let height = Math.floor(containerRect.height);

      // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      width = Math.max(width, 320);
      height = Math.max(height, 200);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (this.canvas.width !== width || this.canvas.height !== height) {
        this.canvas.width = width;
        this.canvas.height = height;

        console.log(`üìê Canvas —Ä–∞–∑–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: ${width}x${height}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É
        if (this.virtualGrid) {
          this.virtualGrid.updateCanvasSize(width, height);
        }

        // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–∞ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
        this.needsRender = true;
      }
    });
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (–∑–∞–≥–ª—É—à–∫–∏)
  private createNewSpreadsheet(): void {
    console.log('üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã');

    if (this.sparseMatrix && this.virtualGrid) {
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      this.sparseMatrix.clear();

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ
      this.virtualGrid.scrollToHome();
      this.virtualGrid.setActiveCell({ row: 0, col: 0 });

      // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Ñ–æ—Ä–º—É–ª
      const formulaInput = document.getElementById('formula-input') as HTMLInputElement;
      if (formulaInput) {
        formulaInput.value = '';
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      this.updateStatusBar();
      this.needsRender = true;

      console.log('‚úÖ –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞');
    }
  }

  private openSpreadsheet(): void {
    console.log('üìÅ –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã');

    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json';

    input.onchange = event => {
      const file = (event.target as HTMLInputElement).files?.[0];
      if (file && this.sparseMatrix) {
        const reader = new FileReader();
        reader.onload = e => {
          try {
            const data = JSON.parse(e.target?.result as string);

            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            this.sparseMatrix!.clear();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (data.cells) {
              Object.entries(data.cells).forEach(([key, value]) => {
                const [row, col] = key.split(',').map(Number);
                this.sparseMatrix!.setCell(row, col, value as string);
              });
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            this.updateDisplay();
            this.needsRender = true;

            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
          }
        };
        reader.readAsText(file);
      }
    };

    input.click();
  }

  private saveSpreadsheet(): void {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã');

    if (this.sparseMatrix) {
      const data = {
        cells: this.sparseMatrix.getAllCells(),
        createdAt: new Date().toISOString(),
      };

      const blob = new Blob([JSON.stringify(data, null, 2)], {
        type: 'application/json',
      });

      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `spreadsheet_${new Date().toISOString().slice(0, 10)}.json`;
      a.click();

      URL.revokeObjectURL(url);
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    }
  }

  private undo(): void {
    console.log('‚Ü∂ –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏');
  }

  private redo(): void {
    console.log('‚Ü∑ –ü–æ–≤—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏');
  }

  private copy(): void {
    console.log('üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ');

    if (this.virtualGrid && this.sparseMatrix) {
      const activeCell = this.virtualGrid.getActiveCell();
      if (activeCell) {
        const value = this.sparseMatrix.getCell(activeCell.row, activeCell.col);

        // –ö–æ–ø–∏—Ä—É–µ–º –≤ clipboard
        if (navigator.clipboard && window.isSecureContext) {
          navigator.clipboard
            .writeText(value || '')
            .then(() => {
              console.log('‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
            })
            .catch(error => {
              console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞:', error);
            });
        }

        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        (this as any).clipboardValue = value || '';

        console.log(`‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: "${value}" –∏–∑ —è—á–µ–π–∫–∏ ${activeCell.row},${activeCell.col}`);
      }
    }
  }

  private paste(): void {
    console.log('üìã –í—Å—Ç–∞–≤–∫–∞');

    if (this.virtualGrid && this.sparseMatrix) {
      const activeCell = this.virtualGrid.getActiveCell();
      if (activeCell) {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
        if (navigator.clipboard && window.isSecureContext) {
          navigator.clipboard
            .readText()
            .then(text => {
              this.sparseMatrix!.setCell(activeCell.row, activeCell.col, text);
              this.updateDisplay();
              this.needsRender = true;
              console.log(`‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ: "${text}" –≤ —è—á–µ–π–∫—É ${activeCell.row},${activeCell.col}`);
            })
            .catch(() => {
              // Fallback –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä
              this.pasteFromInternalClipboard(activeCell);
            });
        } else {
          // Fallback –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä
          this.pasteFromInternalClipboard(activeCell);
        }
      }
    }
  }

  private pasteFromInternalClipboard(activeCell: { row: number; col: number }): void {
    const clipboardValue = (this as any).clipboardValue;
    if (clipboardValue !== undefined && this.sparseMatrix) {
      this.sparseMatrix.setCell(activeCell.row, activeCell.col, clipboardValue);
      this.updateDisplay();
      this.needsRender = true;
      console.log(`‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ: "${clipboardValue}" –≤ —è—á–µ–π–∫—É ${activeCell.row},${activeCell.col}`);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
   */
  private setupContextMenuHandlers(): void {
    const contextMenu = document.getElementById('context-menu');
    if (contextMenu) {
      contextMenu.addEventListener('click', event => {
        event.stopPropagation();
        const target = event.target as HTMLElement;
        const action = target.getAttribute('data-action');
        if (action) {
          this.handleContextMenuAction(action);
          this.hideContextMenu();
        }
      });
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
   */
  private showContextMenu(event: MouseEvent): void {
    const contextMenu = document.getElementById('context-menu');
    if (contextMenu) {
      contextMenu.style.display = 'block';
      contextMenu.style.left = `${event.clientX}px`;
      contextMenu.style.top = `${event.clientY}px`;
    }
  }

  /**
   * –°–∫—Ä—ã—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
   */
  private hideContextMenu(): void {
    const contextMenu = document.getElementById('context-menu');
    if (contextMenu) {
      contextMenu.style.display = 'none';
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
   */
  private handleContextMenuAction(action: string): void {
    console.log(`üîß –î–µ–π—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é: ${action}`);

    switch (action) {
      case 'copy':
        this.copy();
        break;
      case 'paste':
        this.paste();
        break;
      case 'insert-row':
        this.insertRow();
        break;
      case 'insert-col':
        this.insertColumn();
        break;
      case 'delete-row':
        this.deleteRow();
        break;
      case 'delete-col':
        this.deleteColumn();
        break;
      case 'clear-cell':
        this.clearCell();
        break;
      default:
        console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é: ${action}`);
    }
  }

  /**
   * –í—Å—Ç–∞–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏
   */
  private insertRow(): void {
    console.log('‚ûï –í—Å—Ç–∞–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)');
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–ø—Ä–∏–Ω—Ç–µ
  }

  /**
   * –í—Å—Ç–∞–≤–∫–∞ —Å—Ç–æ–ª–±—Ü–∞
   */
  private insertColumn(): void {
    console.log('‚ûï –í—Å—Ç–∞–≤–∫–∞ —Å—Ç–æ–ª–±—Ü–∞ (–∑–∞–≥–ª—É—à–∫–∞)');
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–ø—Ä–∏–Ω—Ç–µ
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
   */
  private deleteRow(): void {
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)');
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–ø—Ä–∏–Ω—Ç–µ
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞
   */
  private deleteColumn(): void {
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ (–∑–∞–≥–ª—É—à–∫–∞)');
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–ø—Ä–∏–Ω—Ç–µ
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —è—á–µ–π–∫–∏
   */
  private clearCell(): void {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —è—á–µ–π–∫–∏');

    if (this.virtualGrid && this.sparseMatrix) {
      const activeCell = this.virtualGrid.getActiveCell();
      if (activeCell) {
        this.sparseMatrix.setCell(activeCell.row, activeCell.col, '');

        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Ñ–æ—Ä–º—É–ª
        const formulaInput = document.getElementById('formula-input') as HTMLInputElement;
        if (formulaInput) {
          formulaInput.value = '';
        }

        this.updateDisplay();
        this.needsRender = true;
        console.log(`‚úÖ –Ø—á–µ–π–∫–∞ ${activeCell.row},${activeCell.col} –æ—á–∏—â–µ–Ω–∞`);
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
   */
  private handleKeyDown(event: KeyboardEvent): void {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ñ–æ—Ä–º—É–ª
    const formulaInput = document.getElementById('formula-input') as HTMLInputElement;
    if (document.activeElement === formulaInput) {
      return;
    }

    if (!this.virtualGrid) return;

    const activeCell = this.virtualGrid.getActiveCell();
    if (!activeCell) return;

    let newRow = activeCell.row;
    let newCol = activeCell.col;
    let handled = false;

    switch (event.key) {
      case 'ArrowUp':
        newRow = Math.max(0, activeCell.row - 1);
        handled = true;
        break;
      case 'ArrowDown':
        newRow = activeCell.row + 1;
        handled = true;
        break;
      case 'ArrowLeft':
        newCol = Math.max(0, activeCell.col - 1);
        handled = true;
        break;
      case 'ArrowRight':
        newCol = activeCell.col + 1;
        handled = true;
        break;
      case 'Tab':
        newCol = activeCell.col + 1;
        handled = true;
        break;
      case 'Enter':
        newRow = activeCell.row + 1;
        handled = true;
        break;
      case 'Delete':
      case 'Backspace':
        this.clearCell();
        handled = true;
        break;
      case 'F2':
        // –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏
        this.startCellEditing();
        handled = true;
        break;
      default:
        // –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –æ–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏—à–∞, –Ω–∞—á–∏–Ω–∞–µ–º –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
        if (event.key.length === 1 && !event.ctrlKey && !event.altKey && !event.metaKey) {
          this.startCellEditing(event.key);
          handled = true;
        }
        break;
    }

    if (handled) {
      event.preventDefault();

      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —è—á–µ–π–∫—É –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
      if (newRow !== activeCell.row || newCol !== activeCell.col) {
        this.virtualGrid.setActiveCell({ row: newRow, col: newCol });
        this.updateFormulaBar({ row: newRow, col: newCol });
        this.updateStatusBar();
        this.needsRender = true;

        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —è—á–µ–π–∫–µ –µ—Å–ª–∏ –æ–Ω–∞ –≤–Ω–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏
        this.scrollToCell(newRow, newCol);
      }
    }
  }

  /**
   * –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏
   */
  private startCellEditing(initialValue?: string): void {
    const formulaInput = document.getElementById('formula-input') as HTMLInputElement;
    if (formulaInput) {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ
      if (initialValue !== undefined) {
        formulaInput.value = initialValue;
      }

      // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ —Ñ–æ—Ä–º—É–ª
      formulaInput.focus();
      formulaInput.select();

      console.log('‚úèÔ∏è –ù–∞—á–∞—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏');
    }
  }

  /**
   * –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π —è—á–µ–π–∫–µ
   */
  private scrollToCell(row: number, col: number): void {
    if (this.virtualGrid) {
      const viewport = this.virtualGrid.getViewport();
      let needsScroll = false;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
      if (row < viewport.startRow || row >= viewport.endRow) {
        needsScroll = true;
      }
      if (col < viewport.startCol || col >= viewport.endCol) {
        needsScroll = true;
      }

      if (needsScroll) {
        this.virtualGrid.scrollToCell(row, col);
        this.needsRender = true;
        console.log(`üìä –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —è—á–µ–π–∫–µ ${row},${col}`);
      }
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—ã–¥–µ–ª–µ–Ω–∏—è —è—á–µ–π–∫–∏
   */
  private async renderCellSelection(cell: { row: number; col: number }): Promise<void> {
    if (!this.gridRenderer) return;

    try {
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —è—á–µ–π–∫–∏ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
      const viewport = this.virtualGrid!.getViewport();
      const selectedCell = {
        row: cell.row,
        col: cell.col,
        value: null,
        // –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ë–ï–ó –≤—ã—á–∏—Ç–∞–Ω–∏—è viewport offset
        screenX: (cell.col - viewport.startCol) * this.config.cellWidth,
        screenY: (cell.row - viewport.startRow) * this.config.cellHeight,
        width: this.config.cellWidth,
        height: this.config.cellHeight,
      };

      await this.gridRenderer.renderSelection(selectedCell);
      console.log(`üéØ –í—ã–¥–µ–ª–µ–Ω–∞ —è—á–µ–π–∫–∞ ${cell.row},${cell.col}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è:', error);
    }
  }
}
