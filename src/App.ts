/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è WebGPU Excel
 */

import type { AppConfig, InitializationResult } from './types/index.js';
import { WebGPUDeviceManager } from './rendering/webgpu-setup/DeviceManager.js';
import { RenderManager } from './rendering/webgpu-setup/RenderManager.js';
import { GridRenderer } from './rendering/GridRenderer.js';
import { HeaderRenderer } from './rendering/HeaderRenderer.js';
import { TextRenderer } from './rendering/TextRenderer.js';
import { VirtualGrid } from './core/virtual-grid/VirtualGrid.js';
import { SparseMatrix } from './core/sparse-matrix/SparseMatrix.js';
import { OperationHistory, type AnyOperation } from './core/operation-history/OperationHistory.js';
import { FormulaManager, type CellValue } from './core/formulas/FormulaManager.js';

export class App {
  private config: AppConfig;
  private canvas: HTMLCanvasElement;
  private webgpuManager: WebGPUDeviceManager | null = null;
  private renderManager: RenderManager | null = null;
  private gridRenderer: GridRenderer | null = null;
  private headerRenderer: HeaderRenderer | null = null;
  private textRenderer: TextRenderer | null = null;
  private virtualGrid: VirtualGrid | null = null;
  private sparseMatrix: SparseMatrix | null = null;
  private operationHistory: OperationHistory | null = null;
  private formulaManager: FormulaManager | null = null;
  private isInitialized = false;

  // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
  private contextMenuCell: { row: number; col: number } | null = null;

  // FPS tracking
  private frameCount = 0;
  private fps = 0;
  private lastFpsUpdate = 0;
  private needsRender = true;

  constructor(config: AppConfig) {
    this.config = config;
    this.canvas = this.getCanvas();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   */
  async initialize(): Promise<void> {
    try {
      // 0. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä canvas
      this.setupCanvas();

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É WebGPU
      if (this.config.enableWebGPU) {
        await this.initializeWebGPU();
      }

      // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É
      this.initializeVirtualGrid();

      // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
      this.initializeSparseMatrix();

      // 4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.setupEventHandlers();

      // 5. –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
      this.startRendering();

      this.isInitialized = true;
      this.lastFpsUpdate = performance.now();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ FPS
      this.updateFPSDisplay();

      console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebGPU
   */
  private async initializeWebGPU(): Promise<void> {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebGPU...');

    this.webgpuManager = new WebGPUDeviceManager();
    const result: InitializationResult = await this.webgpuManager.initialize(this.canvas);

    if (!result.success || !result.config) {
      throw new Error(`WebGPU –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: ${result.error}`);
    }

    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    this.renderManager = new RenderManager(
      result.config,
      this.canvas,
      this.config.cellWidth,
      this.config.cellHeight
    );
    await this.renderManager.initialize();

    // –°–æ–∑–¥–∞–µ–º GridRenderer –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∫–∏
    this.gridRenderer = new GridRenderer(
      result.config,
      this.canvas,
      this.config.cellWidth,
      this.config.cellHeight
    );
    await this.gridRenderer.initialize();

    // –°–æ–∑–¥–∞–µ–º HeaderRenderer –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ —Å—Ç—Ä–æ–∫
    const headersCanvas = document.getElementById('headers-canvas') as HTMLCanvasElement;
    if (headersCanvas) {
      this.headerRenderer = new HeaderRenderer(
        headersCanvas,
        this.config.cellWidth,
        this.config.cellHeight
      );
      console.log('‚úÖ HeaderRenderer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } else {
      console.warn('‚ö†Ô∏è headers-canvas –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã');
    }

    // –°–æ–∑–¥–∞–µ–º TextRenderer –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –≤ —è—á–µ–π–∫–∞—Ö
    const textCanvas = document.getElementById('text-canvas') as HTMLCanvasElement;
    if (textCanvas) {
      this.textRenderer = new TextRenderer(
        textCanvas,
        this.config.cellWidth,
        this.config.cellHeight
      );
      console.log('‚úÖ TextRenderer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } else {
      console.warn('‚ö†Ô∏è text-canvas –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω');
    }

    console.log('‚úÖ WebGPU, —Ä–µ–Ω–¥–µ—Ä-–ø–∞–π–ø–ª–∞–π–Ω –∏ GridRenderer —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å–µ—Ç–∫–∏
   */
  private initializeVirtualGrid(): void {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å–µ—Ç–∫–∏...');

    this.virtualGrid = new VirtualGrid(
      this.canvas.width,
      this.canvas.height,
      this.config.cellWidth,
      this.config.cellHeight,
      this.config.maxRows,
      this.config.maxCols
    );

    console.log('‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å–µ—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
   */
  private initializeSparseMatrix(): void {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã...');

    this.sparseMatrix = new SparseMatrix();

    console.log('‚úÖ –†–∞–∑—Ä–µ–∂–µ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π
    this.operationHistory = new OperationHistory(100);
    console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ñ–æ—Ä–º—É–ª
    this.formulaManager = new FormulaManager({
      getCellValue: (row: number, col: number) => this.getCellValue(row, col),
      getCellRange: (startRow: number, startCol: number, endRow: number, endCol: number) =>
        this.getCellRange(startRow, startCol, endRow, endCol),
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª –≤ SparseMatrix
    this.formulaManager.setUpdateFormulaCallback((row: number, col: number, formula: string) => {
      this.sparseMatrix?.setCell(row, col, formula);
    });

    console.log('‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ–æ—Ä–º—É–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∑–Ω–∞—á–µ–Ω–∏–π –≤ VirtualGrid –¥–ª—è —Ñ–æ—Ä–º—É–ª
    if (this.virtualGrid) {
      this.virtualGrid.setCellValueProvider((row: number, col: number) => {
        const cellValue = this.getCellValue(row, col);
        return cellValue.value; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–µ —Ç–∏–ø
      });
    }

    // –î–û–ë–ê–í–õ–Ø–ï–ú –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
    this.addTestData();
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
   */
  private addTestData(): void {
    if (!this.sparseMatrix) return;

    console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    this.sparseMatrix.setCell(0, 0, '–ò–º—è');
    this.sparseMatrix.setCell(0, 1, '–í–æ–∑—Ä–∞—Å—Ç');
    this.sparseMatrix.setCell(0, 2, '–ì–æ—Ä–æ–¥');
    this.sparseMatrix.setCell(0, 3, '–ó–∞—Ä–ø–ª–∞—Ç–∞');

    // –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
    this.sparseMatrix.setCell(1, 0, '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤');
    this.sparseMatrix.setCell(1, 1, '25');
    this.sparseMatrix.setCell(1, 2, '–ú–æ—Å–∫–≤–∞');
    this.sparseMatrix.setCell(1, 3, '50000');

    this.sparseMatrix.setCell(2, 0, '–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞');
    this.sparseMatrix.setCell(2, 1, '30');
    this.sparseMatrix.setCell(2, 2, '–°–ü–±');
    this.sparseMatrix.setCell(2, 3, '60000');

    this.sparseMatrix.setCell(3, 0, '–ü–µ—Ç—Ä –ò–≤–∞–Ω–æ–≤');
    this.sparseMatrix.setCell(3, 1, '28');
    this.sparseMatrix.setCell(3, 2, '–ö–∞–∑–∞–Ω—å');
    this.sparseMatrix.setCell(3, 3, '45000');

    // –§–æ—Ä–º—É–ª—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    this.sparseMatrix.setCell(5, 0, '–ò—Ç–æ–≥–æ:');
    this.sparseMatrix.setCell(5, 3, '=SUM(D2:D4)');

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—É MIN
    this.sparseMatrix.setCell(6, 3, '=MIN(D2:D4)');
    console.log('üìä –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞: =MIN(D2:D4)');

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—É MAX
    this.sparseMatrix.setCell(7, 3, '=MAX(D2:D4)');
    console.log('üìä –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞: =MAX(D2:D4)');

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—É AVERAGE
    this.sparseMatrix.setCell(8, 3, '=AVERAGE(D2:D4)');
    console.log('üìä –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞: =AVERAGE(D2:D4)');

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫—É
    this.sparseMatrix.setCell(9, 3, '=D2+D3');
    console.log('üìä –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞: =D2+D3');

    // –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–µ–∑–∫–∏
    this.sparseMatrix.setCell(7, 0, '–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –≤ —è—á–µ–π–∫—É');
    this.sparseMatrix.setCell(7, 1, '–ö–æ—Ä–æ—Ç–∫–∏–π');

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö 1000x1000 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  private generateTestData1000x1000(): void {
    if (!this.sparseMatrix) return;

    console.log('üß™ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö 1000x1000...');

    const startTime = performance.now();
    let cellsGenerated = 0;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    const statusText = document.getElementById('status-text');
    if (statusText) {
      statusText.textContent = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...';
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞—Ç—á–∞–º–∏ –¥–ª—è –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI
    const batchSize = 1000;
    let currentRow = 0;
    let currentCol = 0;

    const generateBatch = () => {
      for (let i = 0; i < batchSize && currentRow < 1000; i++) {
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        if (currentRow === 0) {
          this.sparseMatrix!.setCell(0, currentCol, `Col${currentCol}`);
        } else {
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
          let value;
          switch (currentCol % 5) {
            case 0:
              value = `–°—Ç—Ä–æ–∫–∞ ${currentRow}-${currentCol}`;
              break;
            case 1:
              value = Math.floor(Math.random() * 10000);
              break;
            case 2:
              value = (Math.random() * 100).toFixed(2);
              break;
            case 3:
              value =
                Math.random() > 0.7
                  ? `–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —è—á–µ–π–∫–µ ${currentRow},${currentCol}`
                  : `–¢–µ–∫—Å—Ç ${currentRow}`;
              break;
            case 4:
              value = Math.random() > 0.5 ? '–î–∞' : '–ù–µ—Ç';
              break;
          }
          this.sparseMatrix!.setCell(currentRow, currentCol, value);
        }

        cellsGenerated++;
        currentCol++;

        if (currentCol >= 1000) {
          currentCol = 0;
          currentRow++;
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      const progress = Math.round((currentRow / 1000) * 100);
      if (statusText) {
        statusText.textContent = `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è: ${progress}% (${cellsGenerated} —è—á–µ–µ–∫)`;
      }

      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
      if (currentRow < 1000) {
        setTimeout(generateBatch, 10); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è UI
      } else {
        const endTime = performance.now();
        const duration = Math.round(endTime - startTime);

        console.log(
          `‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ 1000x1000 —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: ${cellsGenerated} —è—á–µ–µ–∫ –∑–∞ ${duration}–º—Å`
        );

        if (statusText) {
          statusText.textContent = `–ì–æ—Ç–æ–≤ (${cellsGenerated} —è—á–µ–µ–∫, ${duration}–º—Å)`;
        }

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
        this.needsRender = true;
        this.render();
      }
    };

    generateBatch();
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  private setupEventHandlers(): void {
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    this.setupToolbarHandlers();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–Ω–µ–ª–∏ —Ñ–æ—Ä–º—É–ª
    this.setupFormulaBarHandlers();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ canvas
    this.setupCanvasHandlers();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    this.setupKeyboardHandlers();

    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
   */
  private setupToolbarHandlers(): void {
    const toolbarButtons = document.querySelectorAll('.toolbar-button[data-action]');

    toolbarButtons.forEach(button => {
      button.addEventListener('click', event => {
        const action = (event.target as HTMLElement).getAttribute('data-action');
        this.handleToolbarAction(action);
      });
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–∞–Ω–µ–ª–∏ —Ñ–æ—Ä–º—É–ª
   */
  private setupFormulaBarHandlers(): void {
    const formulaInput = document.getElementById('formula-input') as HTMLInputElement;
    const enterButton = document.querySelector('[data-action="enter"]') as HTMLButtonElement;

    if (formulaInput) {
      formulaInput.addEventListener('keydown', event => {
        if (event.key === 'Enter') {
          this.handleFormulaSubmit(formulaInput.value);
        }
      });
    }

    if (enterButton) {
      enterButton.addEventListener('click', () => {
        if (formulaInput) {
          this.handleFormulaSubmit(formulaInput.value);
        }
      });
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ canvas
   */
  private setupCanvasHandlers(): void {
    this.canvas.addEventListener('click', event => {
      this.handleCanvasClick(event);
    });

    this.canvas.addEventListener('mousemove', event => {
      this.handleCanvasMouseMove(event);
    });

    this.canvas.addEventListener('wheel', event => {
      this.handleCanvasWheel(event);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    this.canvas.addEventListener('contextmenu', event => {
      event.preventDefault();
      this.showContextMenu(event);
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    document.addEventListener('click', () => {
      this.hideContextMenu();
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    this.setupContextMenuHandlers();
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
   */
  private setupKeyboardHandlers(): void {
    document.addEventListener('keydown', event => {
      this.handleKeyDown(event);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–∫—É—Å–∞ –Ω–∞ canvas –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    this.canvas.tabIndex = 0; // –î–µ–ª–∞–µ–º canvas focusable
    this.canvas.addEventListener('focus', () => {
      console.log('üéØ Canvas –ø–æ–ª—É—á–∏–ª —Ñ–æ–∫—É—Å');
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
   */
  private handleToolbarAction(action: string | null): void {
    if (!action) return;

    console.log(`üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è: ${action}`);

    switch (action) {
      case 'new':
        this.createNewSpreadsheet();
        break;
      case 'open':
        this.openSpreadsheet();
        break;
      case 'save':
        this.saveSpreadsheet();
        break;
      case 'undo':
        this.undo();
        break;
      case 'redo':
        this.redo();
        break;
      case 'copy':
        this.copy();
        break;
      case 'paste':
        this.paste();
        break;
      case 'test-1000x1000':
        this.generateTestData1000x1000();
        break;
      default:
        console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—É–ª—ã
   */
  private handleFormulaSubmit(formula: string): void {
    console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—É–ª—ã: ${formula}`);

    if (this.virtualGrid && this.sparseMatrix) {
      const activeCell = this.virtualGrid.getActiveCell();
      if (activeCell) {
        this.sparseMatrix.setCell(activeCell.row, activeCell.col, formula);
        this.updateDisplay();
        this.needsRender = true; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ canvas
   */
  private handleCanvasClick(event: MouseEvent): void {
    if (!this.virtualGrid) return;

    const rect = this.canvas.getBoundingClientRect();
    let x = event.clientX - rect.left;
    let y = event.clientY - rect.top;

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫ —Å —É—á–µ—Ç–æ–º –æ—Ç—Å—Ç—É–ø–æ–≤ –°–õ–ï–í–ê –∏ –°–í–ï–†–•–£
    const headerWidth = 30; // –®–∏—Ä–∏–Ω–∞ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫
    const headerHeight = 25; // –í—ã—Å–æ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–∫ –ø–æ –æ–±–ª–∞—Å—Ç—è–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º)
    if (x < headerWidth || y < headerHeight) {
      console.log('üè∑Ô∏è –ö–ª–∏–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º');
      return;
    }

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–∏
    x -= headerWidth;
    y -= headerHeight;

    const cell = this.virtualGrid.getCellAtPosition(x, y);
    if (cell) {
      this.virtualGrid.setActiveCell(cell);
      this.updateFormulaBar(cell);
      this.updateStatusBar();

      // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–∞ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ (–≤—ã–¥–µ–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º render)
      this.needsRender = true;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –ø–æ canvas
   */
  private handleCanvasMouseMove(event: MouseEvent): void {
    if (!this.virtualGrid) return;

    const rect = this.canvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;

    const cell = this.virtualGrid.getCellAtPosition(x, y);
    if (cell) {
      // –ò–∑–º–µ–Ω—è–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ pointer –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ —è—á–µ–π–∫—É
      this.canvas.style.cursor = 'pointer';

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è—á–µ–π–∫–µ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
      (this as any).hoveredCell = cell;
    } else {
      this.canvas.style.cursor = 'default';
      (this as any).hoveredCell = null;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏
   */
  private handleCanvasWheel(event: WheelEvent): void {
    event.preventDefault();

    if (!this.virtualGrid) return;

    const delta = event.deltaY;
    if (delta > 0) {
      this.virtualGrid.scrollDown();
    } else {
      this.virtualGrid.scrollUp();
    }

    this.updateDisplay();
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
   */
  private startRendering(): void {
    console.log('üé® –ó–∞–ø—É—Å–∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞...');

    const render = async (currentTime: number) => {
      this.updateFPS(currentTime);

      // –†–µ–Ω–¥–µ—Ä–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (this.needsRender) {
        await this.render();
        this.needsRender = false;
      }

      requestAnimationFrame(render);
    };

    requestAnimationFrame(render);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ FPS
   */
  private updateFPS(currentTime: number): void {
    this.frameCount++;

    if (currentTime - this.lastFpsUpdate >= 1000) {
      this.fps = Math.round((this.frameCount * 1000) / (currentTime - this.lastFpsUpdate));
      this.frameCount = 0;
      this.lastFpsUpdate = currentTime;

      // –û–±–Ω–æ–≤–ª—è–µ–º FPS –≤ UI
      this.updateFPSDisplay();
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞–¥—Ä–∞
   */
  private async render(): Promise<void> {
    if (!this.isInitialized || !this.virtualGrid) return;

    // –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–∏–º—ã–µ —è—á–µ–π–∫–∏
    const visibleCells = this.virtualGrid.getVisibleCells();

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —è—á–µ–π–∫–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ SparseMatrix
    if (this.sparseMatrix) {
      visibleCells.forEach(cell => {
        cell.value = this.sparseMatrix!.getCell(cell.row, cell.col);
      });
    }

    // –†–µ–Ω–¥–µ—Ä–∏–º —á–µ—Ä–µ–∑ WebGPU –∏–ª–∏ Canvas 2D
    if (this.webgpuManager) {
      await this.renderWithWebGPU(visibleCells);
    } else {
      this.renderWithCanvas2D(visibleCells);
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ WebGPU —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GridRenderer
   */
  private async renderWithWebGPU(cells: any[]): Promise<void> {
    if (!this.gridRenderer || !this.virtualGrid) return;

    try {
      // –ü–æ–ª—É—á–∞–µ–º viewport –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
      const viewport = this.virtualGrid.getViewport();

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —è—á–µ–π–∫—É –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
      const activeCell = this.virtualGrid.getActiveCell();
      let selectedCellData = null;

      if (activeCell) {
        selectedCellData = {
          row: activeCell.row,
          col: activeCell.col,
          value: null,
          screenX: (activeCell.col - viewport.startCol) * this.config.cellWidth,
          screenY: (activeCell.row - viewport.startRow) * this.config.cellHeight,
          width: this.config.cellWidth,
          height: this.config.cellHeight,
        };

        const isVisible =
          activeCell.col >= viewport.startCol &&
          activeCell.col <= viewport.endCol &&
          activeCell.row >= viewport.startRow &&
          activeCell.row <= viewport.endRow;

        console.log(
          `üéØ APP –û–¢–õ–ê–î–ö–ê: activeCell=${JSON.stringify(activeCell)}, viewport=${JSON.stringify(viewport)}, selectedCellData=${JSON.stringify(selectedCellData)}, –í–ò–î–ò–ú–ê–Ø=${isVisible}`
        );
      } else {
        console.log(`üéØ APP –û–¢–õ–ê–î–ö–ê: –ù–ï–¢ –ê–ö–¢–ò–í–ù–û–ô –Ø–ß–ï–ô–ö–ò!`);
      }

      // –†–µ–Ω–¥–µ—Ä–∏–º —á–µ—Ä–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π GridRenderer —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
      await this.gridRenderer.render(cells, viewport, selectedCellData);

      // –†–µ–Ω–¥–µ—Ä–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ —Å—Ç—Ä–æ–∫
      if (this.headerRenderer) {
        this.headerRenderer.render(viewport);
      }

      // –†–µ–Ω–¥–µ—Ä–∏–º —Ç–µ–∫—Å—Ç –≤ —è—á–µ–π–∫–∞—Ö
      if (this.textRenderer) {
        this.textRenderer.render(cells, viewport);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ WebGPU —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:', error);
      // Fallback –Ω–∞ Canvas 2D
      this.renderWithCanvas2D(cells);
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ Canvas 2D
   */
  private renderWithCanvas2D(cells: any[]): void {
    const ctx = this.canvas.getContext('2d');
    if (!ctx) return;

    // –û—á–∏—â–∞–µ–º canvas
    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —Ä–µ–Ω–¥–µ—Ä–∏–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ —è—á–µ–π–∫–∏
    if (cells.length > 0) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –æ–¥–∏–Ω —Ä–∞–∑
      ctx.font = '12px Arial';
      ctx.textBaseline = 'top';

      // –†–µ–Ω–¥–µ—Ä–∏–º —è—á–µ–π–∫–∏ –±–∞—Ç—á–∞–º–∏
      cells.forEach(cell => {
        this.renderCell2D(ctx, cell);
      });
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —è—á–µ–π–∫–∏ —á–µ—Ä–µ–∑ Canvas 2D
   */
  private renderCell2D(ctx: CanvasRenderingContext2D, cell: any): void {
    // –§–æ–Ω —è—á–µ–π–∫–∏
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(cell.screenX, cell.screenY, cell.width, cell.height);

    // –ì—Ä–∞–Ω–∏—Ü—ã —è—á–µ–π–∫–∏
    ctx.strokeStyle = '#e0e0e0';
    ctx.lineWidth = 1;
    ctx.strokeRect(cell.screenX, cell.screenY, cell.width, cell.height);

    // –¢–µ–∫—Å—Ç —è—á–µ–π–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ)
    if (cell.value && String(cell.value).trim()) {
      ctx.fillStyle = '#000000';
      ctx.fillText(String(cell.value), cell.screenX + 4, cell.screenY + 18);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private updateDisplay(): void {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å-–±–∞—Ä
    this.updateStatusBar();

    // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–∞ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ (–≤–∫–ª—é—á–∞—è –≤—ã–¥–µ–ª–µ–Ω–∏–µ)
    this.needsRender = true;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ñ–æ—Ä–º—É–ª
   */
  private updateFormulaBar(cell: any): void {
    const formulaInput = document.getElementById('formula-input') as HTMLInputElement;
    if (formulaInput && this.sparseMatrix) {
      const value = this.sparseMatrix.getCell(cell.row, cell.col);
      formulaInput.value = value || '';
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞
   */
  private updateStatusBar(): void {
    const cellInfo = document.getElementById('cell-info');
    const statusText = document.getElementById('status-text');

    if (this.virtualGrid) {
      const activeCell = this.virtualGrid.getActiveCell();
      if (activeCell && cellInfo) {
        const colName = this.getColumnName(activeCell.col);
        const rowName = (activeCell.row + 1).toString();
        cellInfo.textContent = `${colName}${rowName}`;
      }
    }

    if (statusText) {
      statusText.textContent = '–ì–æ—Ç–æ–≤';
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è FPS
   */
  private updateFPSDisplay(): void {
    const fpsElement = document.getElementById('performance-info');
    if (fpsElement) {
      fpsElement.textContent = `FPS: ${this.fps}`;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å—Ç–æ–ª–±—Ü–∞
   */
  private getColumnName(col: number): string {
    let result = '';
    while (col >= 0) {
      result = String.fromCharCode(65 + (col % 26)) + result;
      col = Math.floor(col / 26) - 1;
    }
    return result;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ canvas —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  private getCanvas(): HTMLCanvasElement {
    const canvas = document.getElementById('spreadsheet-canvas') as HTMLCanvasElement;
    if (!canvas) {
      throw new Error('Canvas —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    return canvas;
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ canvas
   */
  private setupCanvas(): void {
    this.updateCanvasSize(); // –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
    window.addEventListener('resize', () => {
      this.updateCanvasSize();
    });

    // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
    window.addEventListener('orientationchange', () => {
      setTimeout(() => this.updateCanvasSize(), 100); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ - –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ layout –º–µ–Ω—è–µ—Ç—Å—è
    const resizeObserver = new ResizeObserver(() => {
      this.updateCanvasSize();
    });

    const container = this.canvas.parentElement;
    if (container) {
      resizeObserver.observe(container);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ canvas –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
   */
  private updateCanvasSize(): void {
    const container = this.canvas.parentElement;
    if (!container) return;

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º layout –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    requestAnimationFrame(() => {
      const containerRect = container.getBoundingClientRect();
      let width = Math.floor(containerRect.width);
      let height = Math.floor(containerRect.height);

      // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      width = Math.max(width, 320);
      height = Math.max(height, 200);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (this.canvas.width !== width || this.canvas.height !== height) {
        this.canvas.width = width;
        this.canvas.height = height;

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä headers canvas
        const headersCanvas = document.getElementById('headers-canvas') as HTMLCanvasElement;
        if (headersCanvas) {
          headersCanvas.width = width;
          headersCanvas.height = height;
        }

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä text canvas
        const textCanvas = document.getElementById('text-canvas') as HTMLCanvasElement;
        if (textCanvas) {
          textCanvas.width = width;
          textCanvas.height = height;
        }

        console.log(`üìê Canvas —Ä–∞–∑–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: ${width}x${height}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å–µ—Ç–∫—É
        if (this.virtualGrid) {
          this.virtualGrid.updateCanvasSize(width, height);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º HeaderRenderer
        if (this.headerRenderer) {
          this.headerRenderer.updateCanvasSize(width, height);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º TextRenderer
        if (this.textRenderer) {
          this.textRenderer.updateCanvasSize(width, height);
        }

        // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–∞ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
        this.needsRender = true;
      }
    });
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (–∑–∞–≥–ª—É—à–∫–∏)
  private createNewSpreadsheet(): void {
    console.log('üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã');

    if (this.sparseMatrix && this.virtualGrid) {
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      this.sparseMatrix.clear();

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ
      this.virtualGrid.scrollToHome();
      this.virtualGrid.setActiveCell({ row: 0, col: 0 });

      // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Ñ–æ—Ä–º—É–ª
      const formulaInput = document.getElementById('formula-input') as HTMLInputElement;
      if (formulaInput) {
        formulaInput.value = '';
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      this.updateStatusBar();
      this.needsRender = true;

      console.log('‚úÖ –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞');
    }
  }

  private openSpreadsheet(): void {
    console.log('üìÅ –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã');

    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json';

    input.onchange = event => {
      const file = (event.target as HTMLInputElement).files?.[0];
      if (file && this.sparseMatrix) {
        const reader = new FileReader();
        reader.onload = e => {
          try {
            const data = JSON.parse(e.target?.result as string);

            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            this.sparseMatrix!.clear();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (data.cells) {
              Object.entries(data.cells).forEach(([key, value]) => {
                const parts = key.split(',').map(Number);
                const row = parts[0];
                const col = parts[1];
                if (row !== undefined && col !== undefined) {
                  this.sparseMatrix!.setCell(row, col, value as string);
                }
              });
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            this.updateDisplay();
            this.needsRender = true;

            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
          }
        };
        reader.readAsText(file);
      }
    };

    input.click();
  }

  private saveSpreadsheet(): void {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã');

    if (this.sparseMatrix) {
      const data = {
        cells: this.sparseMatrix.getAllCells(),
        createdAt: new Date().toISOString(),
      };

      const blob = new Blob([JSON.stringify(data, null, 2)], {
        type: 'application/json',
      });

      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `spreadsheet_${new Date().toISOString().slice(0, 10)}.json`;
      a.click();

      URL.revokeObjectURL(url);
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    }
  }

  private copy(): void {
    console.log('üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ');

    if (this.virtualGrid && this.sparseMatrix) {
      const activeCell = this.virtualGrid.getActiveCell();
      if (activeCell) {
        const value = this.sparseMatrix.getCell(activeCell.row, activeCell.col);

        // –ö–æ–ø–∏—Ä—É–µ–º –≤ clipboard
        if (navigator.clipboard && window.isSecureContext) {
          navigator.clipboard
            .writeText(value || '')
            .then(() => {
              console.log('‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
            })
            .catch(error => {
              console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞:', error);
            });
        }

        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        (this as any).clipboardValue = value || '';

        console.log(`‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: "${value}" –∏–∑ —è—á–µ–π–∫–∏ ${activeCell.row},${activeCell.col}`);
      }
    }
  }

  private paste(): void {
    console.log('üìã –í—Å—Ç–∞–≤–∫–∞');

    if (this.virtualGrid && this.sparseMatrix) {
      const activeCell = this.virtualGrid.getActiveCell();
      if (activeCell) {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
        if (navigator.clipboard && window.isSecureContext) {
          navigator.clipboard
            .readText()
            .then(text => {
              this.sparseMatrix!.setCell(activeCell.row, activeCell.col, text);
              this.updateDisplay();
              this.needsRender = true;
              console.log(`‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ: "${text}" –≤ —è—á–µ–π–∫—É ${activeCell.row},${activeCell.col}`);
            })
            .catch(() => {
              // Fallback –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä
              this.pasteFromInternalClipboard(activeCell);
            });
        } else {
          // Fallback –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä
          this.pasteFromInternalClipboard(activeCell);
        }
      }
    }
  }

  private pasteFromInternalClipboard(activeCell: { row: number; col: number }): void {
    const clipboardValue = (this as any).clipboardValue;
    if (clipboardValue !== undefined && this.sparseMatrix) {
      this.sparseMatrix.setCell(activeCell.row, activeCell.col, clipboardValue);
      this.updateDisplay();
      this.needsRender = true;
      console.log(`‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ: "${clipboardValue}" –≤ —è—á–µ–π–∫—É ${activeCell.row},${activeCell.col}`);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
   */
  private setupContextMenuHandlers(): void {
    const contextMenu = document.getElementById('context-menu');
    if (contextMenu) {
      contextMenu.addEventListener('click', event => {
        event.stopPropagation();
        const target = event.target as HTMLElement;
        const action = target.getAttribute('data-action');
        if (action) {
          this.handleContextMenuAction(action);
          this.hideContextMenu();
        }
      });
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
   */
  private showContextMenu(event: MouseEvent): void {
    const contextMenu = document.getElementById('context-menu');
    if (!contextMenu || !this.virtualGrid) return;

    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏ –ø–æ –∫–ª–∏–∫—É
    const canvasRect = this.canvas.getBoundingClientRect();
    const clickX = event.clientX - canvasRect.left;
    const clickY = event.clientY - canvasRect.top;

    // –£—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const headerWidth = 30;
    const headerHeight = 25;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –Ω–µ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
    if (clickX < headerWidth || clickY < headerHeight) {
      return; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏
    const cellX = clickX - headerWidth;
    const cellY = clickY - headerHeight;

    const viewport = this.virtualGrid.getViewport();
    const col = viewport.startCol + Math.floor(cellX / this.config.cellWidth);
    const row = viewport.startRow + Math.floor(cellY / this.config.cellHeight);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
    this.contextMenuCell = { row, col };

    console.log(`üéØ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —è—á–µ–π–∫–∏ ${row},${col} (–∫–ª–∏–∫: ${clickX},${clickY})`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    contextMenu.style.display = 'block';
    contextMenu.style.left = `${event.clientX}px`;
    contextMenu.style.top = `${event.clientY}px`;
  }

  /**
   * –°–∫—Ä—ã—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
   */
  private hideContextMenu(): void {
    const contextMenu = document.getElementById('context-menu');
    if (contextMenu) {
      contextMenu.style.display = 'none';
    }
    // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    this.contextMenuCell = null;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
   */
  private handleContextMenuAction(action: string): void {
    console.log(`üîß –î–µ–π—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é: ${action}`);

    switch (action) {
      case 'copy':
        this.copy();
        break;
      case 'paste':
        this.paste();
        break;
      case 'insert-row':
        this.insertRow();
        break;
      case 'insert-col':
        this.insertColumn();
        break;
      case 'delete-row':
        this.deleteRow();
        break;
      case 'delete-col':
        this.deleteColumn();
        break;
      case 'clear-cell':
        this.clearCell();
        break;
      default:
        console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é: ${action}`);
    }
  }

  /**
   * –í—Å—Ç–∞–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏
   */
  private insertRow(): void {
    if (!this.sparseMatrix || !this.operationHistory) return;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    const insertAtRow = this.contextMenuCell ? this.contextMenuCell.row : 0;

    console.log(`‚ûï –í—Å—Ç–∞–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${insertAtRow}`);

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —è—á–µ–π–∫–∞—Ö –¥–ª—è –æ—Ç–º–µ–Ω—ã
    const affectedCells: Array<{ row: number; col: number; value: any }> = [];

    // –ü–æ–ª—É—á–∞–µ–º viewport –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    if (this.virtualGrid) {
      const viewport = this.virtualGrid.getViewport();
      for (let row = insertAtRow; row < viewport.endRow; row++) {
        for (let col = viewport.startCol; col < viewport.endCol; col++) {
          const value = this.sparseMatrix.getCell(row, col);
          if (value !== null) {
            affectedCells.push({ row, col, value });
          }
        }
      }
    }

    // –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ SparseMatrix
    this.sparseMatrix.insertRow(insertAtRow);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã
    if (this.formulaManager) {
      this.formulaManager.handleRowInsertion(insertAtRow);
    }

    // –û—á–∏—â–∞–µ–º –∫–µ—à VirtualGrid
    if (this.virtualGrid) {
      this.virtualGrid.clearCache();
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
    this.operationHistory.addOperation({
      type: 'insert_row',
      data: {
        atRow: insertAtRow,
        affectedCells: affectedCells,
      },
      description: `–í—Å—Ç–∞–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${insertAtRow + 1}`,
    });

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
    this.needsRender = true;
    this.render();
  }

  /**
   * –í—Å—Ç–∞–≤–∫–∞ —Å—Ç–æ–ª–±—Ü–∞
   */
  private insertColumn(): void {
    if (!this.sparseMatrix || !this.operationHistory) return;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    const insertAtCol = this.contextMenuCell ? this.contextMenuCell.col : 0;

    console.log(`‚ûï –í—Å—Ç–∞–≤–∫–∞ —Å—Ç–æ–ª–±—Ü–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${insertAtCol}`);

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —è—á–µ–π–∫–∞—Ö –¥–ª—è –æ—Ç–º–µ–Ω—ã
    const affectedCells: Array<{ row: number; col: number; value: any }> = [];

    // –ü–æ–ª—É—á–∞–µ–º viewport –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    if (this.virtualGrid) {
      const viewport = this.virtualGrid.getViewport();
      for (let row = viewport.startRow; row < viewport.endRow; row++) {
        for (let col = insertAtCol; col < viewport.endCol; col++) {
          const value = this.sparseMatrix.getCell(row, col);
          if (value !== null) {
            affectedCells.push({ row, col, value });
          }
        }
      }
    }

    // –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –≤ SparseMatrix
    this.sparseMatrix.insertColumn(insertAtCol);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã
    if (this.formulaManager) {
      this.formulaManager.handleColumnInsertion(insertAtCol);
    }

    // –û—á–∏—â–∞–µ–º –∫–µ—à VirtualGrid
    if (this.virtualGrid) {
      this.virtualGrid.clearCache();
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
    const columnLetter = this.indexToColumnLetter(insertAtCol);
    this.operationHistory.addOperation({
      type: 'insert_column',
      data: {
        atCol: insertAtCol,
        affectedCells: affectedCells,
      },
      description: `–í—Å—Ç–∞–≤–∫–∞ —Å—Ç–æ–ª–±—Ü–∞ ${columnLetter}`,
    });

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
    this.needsRender = true;
    this.render();
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
   */
  private deleteRow(): void {
    if (!this.sparseMatrix || !this.operationHistory) return;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    if (!this.contextMenuCell) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏');
      return;
    }

    const deleteAtRow = this.contextMenuCell.row;

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    const confirmed = confirm(
      `–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É ${deleteAtRow + 1}? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.`
    );
    if (!confirmed) return;

    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ ${deleteAtRow}`);

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª—è–µ–º—ã—Ö —è—á–µ–µ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    const deletedCells: Array<{ row: number; col: number; value: any }> = [];

    // –ü–æ–ª—É—á–∞–µ–º viewport –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    if (this.virtualGrid) {
      const viewport = this.virtualGrid.getViewport();
      for (let col = viewport.startCol; col < viewport.endCol; col++) {
        const value = this.sparseMatrix.getCell(deleteAtRow, col);
        if (value !== null) {
          deletedCells.push({ row: deleteAtRow, col, value });
        }
      }
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ SparseMatrix
    this.sparseMatrix.deleteRow(deleteAtRow);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã
    if (this.formulaManager) {
      this.formulaManager.handleRowDeletion(deleteAtRow);
    }

    // –û—á–∏—â–∞–µ–º –∫–µ—à VirtualGrid
    if (this.virtualGrid) {
      this.virtualGrid.clearCache();
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
    this.operationHistory.addOperation({
      type: 'delete_row',
      data: {
        atRow: deleteAtRow,
        deletedCells: deletedCells,
      },
      description: `–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ ${deleteAtRow + 1}`,
    });

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
    this.needsRender = true;
    this.render();
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞
   */
  private deleteColumn(): void {
    if (!this.sparseMatrix || !this.operationHistory) return;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    if (!this.contextMenuCell) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞');
      return;
    }

    const deleteAtCol = this.contextMenuCell.col;

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ –≤ –±—É–∫–≤—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const columnLetter = this.indexToColumnLetter(deleteAtCol);

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    const confirmed = confirm(
      `–£–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü ${columnLetter}? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–º —Å—Ç–æ–ª–±—Ü–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.`
    );
    if (!confirmed) return;

    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ ${deleteAtCol} (${columnLetter})`);

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª—è–µ–º—ã—Ö —è—á–µ–µ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    const deletedCells: Array<{ row: number; col: number; value: any }> = [];

    // –ü–æ–ª—É—á–∞–µ–º viewport –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    if (this.virtualGrid) {
      const viewport = this.virtualGrid.getViewport();
      for (let row = viewport.startRow; row < viewport.endRow; row++) {
        const value = this.sparseMatrix.getCell(row, deleteAtCol);
        if (value !== null) {
          deletedCells.push({ row, col: deleteAtCol, value });
        }
      }
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –∏–∑ SparseMatrix
    this.sparseMatrix.deleteColumn(deleteAtCol);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã
    if (this.formulaManager) {
      this.formulaManager.handleColumnDeletion(deleteAtCol);
    }

    // –û—á–∏—â–∞–µ–º –∫–µ—à VirtualGrid
    if (this.virtualGrid) {
      this.virtualGrid.clearCache();
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
    this.operationHistory.addOperation({
      type: 'delete_column',
      data: {
        atCol: deleteAtCol,
        deletedCells: deletedCells,
      },
      description: `–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ ${columnLetter}`,
    });

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
    this.needsRender = true;
    this.render();
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —è—á–µ–π–∫–∏
   */
  private clearCell(): void {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —è—á–µ–π–∫–∏');

    if (this.virtualGrid && this.sparseMatrix) {
      const activeCell = this.virtualGrid.getActiveCell();
      if (activeCell) {
        this.sparseMatrix.setCell(activeCell.row, activeCell.col, '');

        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Ñ–æ—Ä–º—É–ª
        const formulaInput = document.getElementById('formula-input') as HTMLInputElement;
        if (formulaInput) {
          formulaInput.value = '';
        }

        this.updateDisplay();
        this.needsRender = true;
        console.log(`‚úÖ –Ø—á–µ–π–∫–∞ ${activeCell.row},${activeCell.col} –æ—á–∏—â–µ–Ω–∞`);
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
   */
  private handleKeyDown(event: KeyboardEvent): void {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ñ–æ—Ä–º—É–ª
    const formulaInput = document.getElementById('formula-input') as HTMLInputElement;
    if (document.activeElement === formulaInput) {
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Undo/Redo
    if (event.ctrlKey || event.metaKey) {
      switch (event.key.toLowerCase()) {
        case 'z':
          event.preventDefault();
          if (event.shiftKey) {
            this.redo(); // Ctrl+Shift+Z –¥–ª—è Redo
          } else {
            this.undo(); // Ctrl+Z –¥–ª—è Undo
          }
          return;
        case 'y':
          event.preventDefault();
          this.redo(); // Ctrl+Y –¥–ª—è Redo
          return;
      }
    }

    if (!this.virtualGrid) return;

    const activeCell = this.virtualGrid.getActiveCell();
    if (!activeCell) return;

    let newRow = activeCell.row;
    let newCol = activeCell.col;
    let handled = false;

    switch (event.key) {
      case 'ArrowUp':
        newRow = Math.max(0, activeCell.row - 1);
        handled = true;
        break;
      case 'ArrowDown':
        newRow = activeCell.row + 1;
        handled = true;
        break;
      case 'ArrowLeft':
        newCol = Math.max(0, activeCell.col - 1);
        handled = true;
        break;
      case 'ArrowRight':
        newCol = activeCell.col + 1;
        handled = true;
        break;
      case 'Tab':
        newCol = activeCell.col + 1;
        handled = true;
        break;
      case 'Enter':
        newRow = activeCell.row + 1;
        handled = true;
        break;
      case 'Delete':
      case 'Backspace':
        this.clearCell();
        handled = true;
        break;
      case 'F2':
        // –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏
        this.startCellEditing();
        handled = true;
        break;
      default:
        // –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –æ–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏—à–∞, –Ω–∞—á–∏–Ω–∞–µ–º –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
        if (event.key.length === 1 && !event.ctrlKey && !event.altKey && !event.metaKey) {
          this.startCellEditing(event.key);
          handled = true;
        }
        break;
    }

    if (handled) {
      event.preventDefault();

      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —è—á–µ–π–∫—É –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
      if (newRow !== activeCell.row || newCol !== activeCell.col) {
        this.virtualGrid.setActiveCell({ row: newRow, col: newCol });
        this.updateFormulaBar({ row: newRow, col: newCol });
        this.updateStatusBar();
        this.needsRender = true;

        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —è—á–µ–π–∫–µ –µ—Å–ª–∏ –æ–Ω–∞ –≤–Ω–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏
        this.scrollToCell(newRow, newCol);
      }
    }
  }

  /**
   * –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏
   */
  private startCellEditing(initialValue?: string): void {
    const formulaInput = document.getElementById('formula-input') as HTMLInputElement;
    if (formulaInput) {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ
      if (initialValue !== undefined) {
        formulaInput.value = initialValue;
      }

      // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ —Ñ–æ—Ä–º—É–ª
      formulaInput.focus();
      formulaInput.select();

      console.log('‚úèÔ∏è –ù–∞—á–∞—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è—á–µ–π–∫–∏');
    }
  }

  /**
   * –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π —è—á–µ–π–∫–µ
   */
  private scrollToCell(row: number, col: number): void {
    if (this.virtualGrid) {
      const viewport = this.virtualGrid.getViewport();
      let needsScroll = false;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
      if (row < viewport.startRow || row >= viewport.endRow) {
        needsScroll = true;
      }
      if (col < viewport.startCol || col >= viewport.endCol) {
        needsScroll = true;
      }

      if (needsScroll) {
        this.virtualGrid.scrollToCell(row, col);
        this.needsRender = true;
        console.log(`üìä –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —è—á–µ–π–∫–µ ${row},${col}`);
      }
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç–æ–ª–±—Ü–∞ –≤ –±—É–∫–≤—É (0 -> A, 1 -> B, ..., 25 -> Z, 26 -> AA)
   */
  private indexToColumnLetter(index: number): string {
    let result = '';
    while (index >= 0) {
      result = String.fromCharCode(65 + (index % 26)) + result;
      index = Math.floor(index / 26) - 1;
    }
    return result;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–π–∫–∏ –¥–ª—è —Ñ–æ—Ä–º—É–ª
   */
  private getCellValue(row: number, col: number): CellValue {
    if (!this.sparseMatrix) {
      return { value: null, type: 'empty' };
    }

    const value = this.sparseMatrix.getCell(row, col);

    if (value === null) {
      return { value: null, type: 'empty' };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–æ–π
    if (typeof value === 'string' && value.startsWith('=')) {
      // –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—É –≤ –º–µ–Ω–µ–¥–∂–µ—Ä, –µ—Å–ª–∏ –µ—ë —Ç–∞–º –Ω–µ—Ç
      if (this.formulaManager) {
        const existingFormula = this.formulaManager.getFormula(row, col);
        if (!existingFormula) {
          this.formulaManager.setFormula(row, col, value);
        }
        // –í—ã—á–∏—Å–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—É
        const result = this.formulaManager.evaluateFormula(row, col);
        console.log(
          `üîç getCellValue(${row},${col}): —Ñ–æ—Ä–º—É–ª–∞ ${value} -> ${JSON.stringify(result)}`
        );

        // –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è —Ñ–æ—Ä–º—É–ª –≤ —Å—Ç–æ–ª–±—Ü–µ 3
        if (col === 3 && row >= 5) {
          console.log(`üîç –û–¢–õ–ê–î–ö–ê –§–û–†–ú–£–õ–´: ${row},${col} = ${value} -> ${JSON.stringify(result)}`);
        }

        return result;
      }
    }

    // –û–±—ã—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if (typeof value === 'number') {
      const result = { value, type: 'number' as const };
      console.log(`üîç getCellValue(${row},${col}): —á–∏—Å–ª–æ ${value} -> ${JSON.stringify(result)}`);
      return result;
    } else if (typeof value === 'string') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–ª–æ–º
      const numValue = parseFloat(value);
      if (!isNaN(numValue) && isFinite(numValue)) {
        const result = { value: numValue, type: 'number' as const };
        console.log(
          `üîç getCellValue(${row},${col}): —Å—Ç—Ä–æ–∫–∞-—á–∏—Å–ª–æ ${value} -> ${JSON.stringify(result)}`
        );
        return result;
      } else {
        const result = { value, type: 'string' as const };
        console.log(`üîç getCellValue(${row},${col}): —Å—Ç—Ä–æ–∫–∞ ${value} -> ${JSON.stringify(result)}`);
        return result;
      }
    }

    return { value: null, type: 'empty' };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—á–µ–µ–∫ –¥–ª—è —Ñ–æ—Ä–º—É–ª
   */
  private getCellRange(
    startRow: number,
    startCol: number,
    endRow: number,
    endCol: number
  ): CellValue[] {
    const values: CellValue[] = [];

    for (let row = startRow; row <= endRow; row++) {
      for (let col = startCol; col <= endCol; col++) {
        values.push(this.getCellValue(row, col));
      }
    }

    return values;
  }

  /**
   * –û—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  private undo(): void {
    if (!this.operationHistory || !this.sparseMatrix) return;

    const operation = this.operationHistory.undo();
    if (!operation) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã');
      return;
    }

    console.log(`‚Ü∂ –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${operation.type}`);

    try {
      this.applyUndoOperation(operation);
      this.needsRender = true;
      this.render();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
    }
  }

  /**
   * –ü–æ–≤—Ç–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  private redo(): void {
    if (!this.operationHistory || !this.sparseMatrix) return;

    const operation = this.operationHistory.redo();
    if (!operation) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞');
      return;
    }

    console.log(`‚Ü∑ –ü–æ–≤—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏: ${operation.type}`);

    try {
      this.applyRedoOperation(operation);
      this.needsRender = true;
      this.render();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
    }
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω—ã
   */
  private applyUndoOperation(operation: AnyOperation): void {
    switch (operation.type) {
      case 'insert_row':
        // –û—Ç–º–µ–Ω–∞ –≤—Å—Ç–∞–≤–∫–∏ —Å—Ç—Ä–æ–∫–∏ = —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
        this.sparseMatrix!.deleteRow(operation.data.atRow);
        break;
      case 'delete_row':
        // –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ = –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        this.sparseMatrix!.insertRow(operation.data.atRow);
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —è—á–µ–µ–∫
        for (const cell of operation.data.deletedCells) {
          this.sparseMatrix!.setCell(cell.row, cell.col, cell.value);
        }
        break;
      case 'insert_column':
        // –û—Ç–º–µ–Ω–∞ –≤—Å—Ç–∞–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–∞ = —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞
        this.sparseMatrix!.deleteColumn(operation.data.atCol);
        break;
      case 'delete_column':
        // –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ = –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        this.sparseMatrix!.insertColumn(operation.data.atCol);
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —è—á–µ–µ–∫
        for (const cell of operation.data.deletedCells) {
          this.sparseMatrix!.setCell(cell.row, cell.col, cell.value);
        }
        break;
      case 'set_cell':
        // –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è—á–µ–π–∫–∏ = –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        this.sparseMatrix!.setCell(operation.data.row, operation.data.col, operation.data.oldValue);
        break;
      case 'clear_cell':
        // –û—Ç–º–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∏ —è—á–µ–π–∫–∏ = –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        this.sparseMatrix!.setCell(operation.data.row, operation.data.col, operation.data.oldValue);
        break;
    }

    // –û—á–∏—â–∞–µ–º –∫–µ—à VirtualGrid –ø–æ—Å–ª–µ –ª—é–±–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (this.virtualGrid) {
      this.virtualGrid.clearCache();
    }
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä–∞
   */
  private applyRedoOperation(operation: AnyOperation): void {
    switch (operation.type) {
      case 'insert_row':
        // –ü–æ–≤—Ç–æ—Ä –≤—Å—Ç–∞–≤–∫–∏ —Å—Ç—Ä–æ–∫–∏
        this.sparseMatrix!.insertRow(operation.data.atRow);
        break;
      case 'delete_row':
        // –ü–æ–≤—Ç–æ—Ä —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
        this.sparseMatrix!.deleteRow(operation.data.atRow);
        break;
      case 'insert_column':
        // –ü–æ–≤—Ç–æ—Ä –≤—Å—Ç–∞–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–∞
        this.sparseMatrix!.insertColumn(operation.data.atCol);
        break;
      case 'delete_column':
        // –ü–æ–≤—Ç–æ—Ä —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞
        this.sparseMatrix!.deleteColumn(operation.data.atCol);
        break;
      case 'set_cell':
        // –ü–æ–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è —è—á–µ–π–∫–∏
        this.sparseMatrix!.setCell(operation.data.row, operation.data.col, operation.data.newValue);
        break;
      case 'clear_cell':
        // –ü–æ–≤—Ç–æ—Ä –æ—á–∏—Å—Ç–∫–∏ —è—á–µ–π–∫–∏
        this.sparseMatrix!.removeCell(operation.data.row, operation.data.col);
        break;
    }

    // –û—á–∏—â–∞–µ–º –∫–µ—à VirtualGrid –ø–æ—Å–ª–µ –ª—é–±–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (this.virtualGrid) {
      this.virtualGrid.clearCache();
    }
  }
}
