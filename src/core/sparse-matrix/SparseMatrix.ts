/**
 * –†–∞–∑—Ä–µ–∂–µ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã
 */

export class SparseMatrix {
  private blocks: Map<string, Map<string, any>> = new Map();
  private blockSize = 1000; // –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞
  private totalCells = 0;

  constructor(blockSize = 1000) {
    this.blockSize = blockSize;
    console.log(`üìä –†–∞–∑—Ä–µ–∂–µ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å —Ä–∞–∑–º–µ—Ä–æ–º –±–ª–æ–∫–∞: ${blockSize}`);
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–π–∫–∏
   */
  setCell(row: number, col: number, value: any): void {
    // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ, —É–¥–∞–ª—è–µ–º —è—á–µ–π–∫—É
    if (value === null || value === undefined || value === '') {
      this.removeCell(row, col);
      return;
    }

    const blockKey = this.getBlockKey(row, col);
    const cellKey = this.getCellKey(row, col);

    // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!this.blocks.has(blockKey)) {
      this.blocks.set(blockKey, new Map());
    }

    const block = this.blocks.get(blockKey)!;
    const hadValue = block.has(cellKey);
    
    block.set(cellKey, value);
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —è—á–µ–µ–∫
    if (!hadValue) {
      this.totalCells++;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–π–∫–∏
   */
  getCell(row: number, col: number): any {
    const blockKey = this.getBlockKey(row, col);
    const cellKey = this.getCellKey(row, col);

    const block = this.blocks.get(blockKey);
    if (!block) {
      return null;
    }

    return block.get(cellKey) || null;
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏
   */
  removeCell(row: number, col: number): void {
    const blockKey = this.getBlockKey(row, col);
    const cellKey = this.getCellKey(row, col);

    const block = this.blocks.get(blockKey);
    if (block && block.has(cellKey)) {
      block.delete(cellKey);
      this.totalCells--;

      // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–π –±–ª–æ–∫
      if (block.size === 0) {
        this.blocks.delete(blockKey);
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —è—á–µ–π–∫–∏
   */
  hasCell(row: number, col: number): boolean {
    const blockKey = this.getBlockKey(row, col);
    const cellKey = this.getCellKey(row, col);

    const block = this.blocks.get(blockKey);
    return block ? block.has(cellKey) : false;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —è—á–µ–µ–∫ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
   */
  getCellsInRange(startRow: number, startCol: number, endRow: number, endCol: number): Array<{row: number, col: number, value: any}> {
    const cells: Array<{row: number, col: number, value: any}> = [];

    for (let row = startRow; row <= endRow; row++) {
      for (let col = startCol; col <= endCol; col++) {
        const value = this.getCell(row, col);
        if (value !== null) {
          cells.push({ row, col, value });
        }
      }
    }

    return cells;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫
   */
  getAllCells(): Array<{row: number, col: number, value: any}> {
    const cells: Array<{row: number, col: number, value: any}> = [];

    for (const [, block] of this.blocks) {
      for (const [cellKey, value] of block) {
        const { row, col } = this.parseCellKey(cellKey);
        cells.push({ row, col, value });
      }
    }

    return cells;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  clear(): void {
    this.blocks.clear();
    this.totalCells = 0;
    console.log('üßπ –†–∞–∑—Ä–µ–∂–µ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
   */
  getMemoryUsage(): number {
    let totalCells = 0;
    let totalBlocks = this.blocks.size;

    for (const block of this.blocks.values()) {
      totalCells += block.size;
    }

    // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤ –±–∞–π—Ç–∞—Ö
    // –ö–∞–∂–¥–∞—è —è—á–µ–π–∫–∞: 8 –±–∞–π—Ç (—É–∫–∞–∑–∞—Ç–µ–ª—å) + —Ä–∞–∑–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è
    // –ö–∞–∂–¥—ã–π –±–ª–æ–∫: 8 –±–∞–π—Ç (—É–∫–∞–∑–∞—Ç–µ–ª—å) + —Ä–∞–∑–º–µ—Ä Map
    const cellMemory = totalCells * 16; // –ü—Ä–∏–º–µ—Ä–Ω–æ 16 –±–∞–π—Ç –Ω–∞ —è—á–µ–π–∫—É
    const blockMemory = totalBlocks * 32; // –ü—Ä–∏–º–µ—Ä–Ω–æ 32 –±–∞–π—Ç–∞ –Ω–∞ –±–ª–æ–∫

    return cellMemory + blockMemory;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  getStats(): {
    totalCells: number;
    totalBlocks: number;
    memoryUsage: number;
    blockSize: number;
    fillRatio: number;
  } {
    const memoryUsage = this.getMemoryUsage();
    const totalBlocks = this.blocks.size;
    
    // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –±—ã –≤—Å–µ —è—á–µ–π–∫–∏ –±—ã–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã)
    const maxPossibleCells = 1000000 * 1000000; // 1M x 1M
    const fillRatio = this.totalCells / maxPossibleCells;

    return {
      totalCells: this.totalCells,
      totalBlocks,
      memoryUsage,
      blockSize: this.blockSize,
      fillRatio
    };
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏
   */
  optimize(): void {
    console.log('üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã...');
    
    const statsBefore = this.getStats();
    
    // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –±–ª–æ–∫–∏
    for (const [blockKey, block] of this.blocks) {
      if (block.size === 0) {
        this.blocks.delete(blockKey);
      }
    }
    
    const statsAfter = this.getStats();
    
    console.log('‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
      blocksBefore: statsBefore.totalBlocks,
      blocksAfter: statsAfter.totalBlocks,
      memoryBefore: `${(statsBefore.memoryUsage / 1024).toFixed(2)} KB`,
      memoryAfter: `${(statsAfter.memoryUsage / 1024).toFixed(2)} KB`
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –±–ª–æ–∫–∞
   */
  private getBlockKey(row: number, col: number): string {
    const blockRow = Math.floor(row / this.blockSize);
    const blockCol = Math.floor(col / this.blockSize);
    return `${blockRow}_${blockCol}`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ —è—á–µ–π–∫–∏
   */
  private getCellKey(row: number, col: number): string {
    const localRow = row % this.blockSize;
    const localCol = col % this.blockSize;
    return `${localRow}_${localCol}`;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –∫–ª—é—á–∞ —è—á–µ–π–∫–∏
   */
  private parseCellKey(cellKey: string): { row: number, col: number } {
    const parts = cellKey.split('_');
    const localRow = Number(parts[0]) || 0;
    const localCol = Number(parts[1]) || 0;
    return { row: localRow, col: localCol };
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JSON
   */
  exportToJSON(): string {
    const data = {
      blockSize: this.blockSize,
      totalCells: this.totalCells,
      blocks: Object.fromEntries(
        Array.from(this.blocks.entries()).map(([blockKey, block]) => [
          blockKey,
          Object.fromEntries(block)
        ])
      )
    };

    return JSON.stringify(data, null, 2);
  }

  /**
   * –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
   */
  importFromJSON(json: string): void {
    try {
      const data = JSON.parse(json);
      
      this.blockSize = data.blockSize || 1000;
      this.totalCells = data.totalCells || 0;
      
      this.blocks.clear();
      
      for (const [blockKey, blockData] of Object.entries(data.blocks)) {
        if (blockData && typeof blockData === 'object') {
          const block = new Map(Object.entries(blockData));
          this.blocks.set(blockKey, block);
        }
      }
      
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ JSON');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ JSON:', error);
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON');
    }
  }
}
