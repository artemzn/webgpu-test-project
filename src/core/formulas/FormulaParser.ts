/**
 * –ü–∞—Ä—Å–µ—Ä —Ñ–æ—Ä–º—É–ª Excel
 */

import {
  FormulaAST,
  FormulaNode,
  CellReference,
  NumberLiteral,
  StringLiteral,
  FunctionCall,
  BinaryOperation,
  UnaryOperation,
  FormulaUtils,
} from './FormulaAST.js';

export interface ParseError {
  message: string;
  position: number;
  expected?: string;
}

export class FormulaParser {
  private input: string = '';
  private position: number = 0;
  private length: number = 0;

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ä–º—É–ª—ã
   */
  parse(formula: string): FormulaAST {
    if (!formula.startsWith('=')) {
      throw new Error('–§–æ—Ä–º—É–ª–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å =');
    }

    this.input = formula.substring(1); // –£–±–∏—Ä–∞–µ–º =
    this.position = 0;
    this.length = this.input.length;

    console.log(`üîç –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ä–º—É–ª—ã: ${formula}`);

    try {
      const root = this.parseExpression();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Å—å –≤–≤–æ–¥ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
      if (this.position < this.length) {
        throw this.createError(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª: ${this.currentChar()}`);
      }

      const ast: FormulaAST = {
        root,
        originalFormula: formula,
      };

      console.log(`‚úÖ –§–æ—Ä–º—É–ª–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞`);
      return ast;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º—É–ª—ã: ${error}`);
      throw error;
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (—Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
   */
  private parseExpression(): FormulaNode {
    return this.parseRange();
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ (A1:B2)
   */
  private parseRange(): FormulaNode {
    let left = this.parseComparison();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
    if (this.match([':'])) {
      const right = this.parseComparison();

      // –ï—Å–ª–∏ –æ–±–∞ –æ–ø–µ—Ä–∞–Ω–¥–∞ - —Å—Å—ã–ª–∫–∏ –Ω–∞ —è—á–µ–π–∫–∏, —Å–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
      if (left.type === 'cell' && right.type === 'cell') {
        return {
          type: 'range',
          startRow: left.row,
          startCol: left.col,
          endRow: right.row,
          endCol: right.col,
          absoluteStartRow: left.absoluteRow || false,
          absoluteStartCol: left.absoluteCol || false,
          absoluteEndRow: right.absoluteRow || false,
          absoluteEndCol: right.absoluteCol || false,
        };
      } else {
        throw this.createError('–î–∏–∞–ø–∞–∑–æ–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ —è—á–µ–π–∫–∏');
      }
    }

    return left;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (=, <, >, <=, >=, <>)
   */
  private parseComparison(): FormulaNode {
    let left = this.parseAddition();

    while (this.match(['=', '<', '>', '<=', '>=', '<>'])) {
      const operator = this.previousToken();
      const right = this.parseAddition();
      left = {
        type: 'binary',
        operator: operator as BinaryOperation['operator'],
        left,
        right,
      };
    }

    return left;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Å–ª–æ–∂–µ–Ω–∏—è –∏ –≤—ã—á–∏—Ç–∞–Ω–∏—è
   */
  private parseAddition(): FormulaNode {
    let left = this.parseMultiplication();

    while (this.match(['+', '-'])) {
      const operator = this.previousToken();
      const right = this.parseMultiplication();
      left = {
        type: 'binary',
        operator: operator as BinaryOperation['operator'],
        left,
        right,
      };
    }

    return left;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —É–º–Ω–æ–∂–µ–Ω–∏—è –∏ –¥–µ–ª–µ–Ω–∏—è
   */
  private parseMultiplication(): FormulaNode {
    let left = this.parseExponentiation();

    while (this.match(['*', '/'])) {
      const operator = this.previousToken();
      const right = this.parseExponentiation();
      left = {
        type: 'binary',
        operator: operator as BinaryOperation['operator'],
        left,
        right,
      };
    }

    return left;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Å—Ç–µ–ø–µ–Ω—å
   */
  private parseExponentiation(): FormulaNode {
    let left = this.parseUnary();

    while (this.match(['^'])) {
      const operator = this.previousToken();
      const right = this.parseUnary();
      left = {
        type: 'binary',
        operator: operator as BinaryOperation['operator'],
        left,
        right,
      };
    }

    return left;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —É–Ω–∞—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  private parseUnary(): FormulaNode {
    if (this.match(['+', '-'])) {
      const operator = this.previousToken();
      const operand = this.parseUnary();
      return {
        type: 'unary',
        operator: operator as UnaryOperation['operator'],
        operand,
      };
    }

    return this.parsePrimary();
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
   */
  private parsePrimary(): FormulaNode {
    // –ß–∏—Å–ª–∞
    if (this.isDigit(this.currentChar())) {
      return this.parseNumber();
    }

    // –°—Ç—Ä–æ–∫–∏
    if (this.currentChar() === '"') {
      return this.parseString();
    }

    // –§—É–Ω–∫—Ü–∏–∏
    if (this.isAlpha(this.currentChar())) {
      const name = this.parseIdentifier();
      if (this.currentChar() === '(') {
        return this.parseFunction(name);
      } else {
        // –≠—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —è—á–µ–π–∫—É
        return this.parseCellReference(name);
      }
    }

    // –°—Å—ã–ª–∫–∏ –Ω–∞ —è—á–µ–π–∫–∏ (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å $)
    if (this.currentChar() === '$') {
      this.advance();
      const name = this.parseIdentifier();
      return this.parseCellReference('$' + name);
    }

    // –°–∫–æ–±–∫–∏
    if (this.currentChar() === '(') {
      this.advance(); // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (
      const expr = this.parseExpression();
      this.consume(')', '–û–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞');
      return expr;
    }

    throw this.createError(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª: ${this.currentChar()}`);
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–ª–∞
   */
  private parseNumber(): NumberLiteral {
    let value = '';

    while (this.isDigit(this.currentChar()) || this.currentChar() === '.') {
      value += this.currentChar();
      this.advance();
    }

    const numValue = parseFloat(value);
    if (isNaN(numValue)) {
      throw this.createError(`–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ: ${value}`);
    }

    return {
      type: 'number',
      value: numValue,
    };
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏
   */
  private parseString(): StringLiteral {
    this.consume('"', '–û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è –∫–∞–≤—ã—á–∫–∞');

    let value = '';
    while (this.currentChar() !== '"' && !this.isAtEnd()) {
      if (this.currentChar() === '\\') {
        this.advance();
        if (this.isAtEnd()) {
          throw this.createError('–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
        }
        value += this.currentChar();
      } else {
        value += this.currentChar();
      }
      this.advance();
    }

    this.consume('"', '–û–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è –∫–∞–≤—ã—á–∫–∞');

    return {
      type: 'string',
      value,
    };
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Ñ—É–Ω–∫—Ü–∏–∏
   */
  private parseFunction(name: string): FunctionCall {
    this.consume('(', '–û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏');

    const args: FormulaNode[] = [];

    if (this.currentChar() !== ')') {
      do {
        args.push(this.parseExpression());
      } while (this.match([',']));
    }

    this.consume(')', '–û–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞');

    return {
      type: 'function',
      name: name.toUpperCase(),
      args,
    };
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–∫–∏ –Ω–∞ —è—á–µ–π–∫—É
   */
  private parseCellReference(prefix: string): CellReference {
    let ref = prefix;

    // –ü–∞—Ä—Å–∏–º –æ—Å—Ç–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å —Å—Å—ã–ª–∫–∏
    while (
      this.isAlpha(this.currentChar()) ||
      this.isDigit(this.currentChar()) ||
      this.currentChar() === '$'
    ) {
      ref += this.currentChar();
      this.advance();
    }

    try {
      return FormulaUtils.parseCellReference(ref);
    } catch (error) {
      throw this.createError(`–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —è—á–µ–π–∫—É: ${ref}`);
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
   */
  private parseIdentifier(): string {
    let identifier = '';

    while (this.isAlpha(this.currentChar()) || this.isDigit(this.currentChar())) {
      identifier += this.currentChar();
      this.advance();
    }

    return identifier;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –æ–¥–Ω–∏–º –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤
   */
  private match(tokens: string[]): boolean {
    for (const token of tokens) {
      if (this.check(token)) {
        this.advance();
        return true;
      }
    }
    return false;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞
   */
  private check(expected: string): boolean {
    if (this.isAtEnd()) return false;
    return this.input.substring(this.position, this.position + expected.length) === expected;
  }

  /**
   * –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
   */
  private consume(expected: string, errorMessage: string): void {
    if (this.check(expected)) {
      this.advance();
    } else {
      throw this.createError(errorMessage);
    }
  }

  /**
   * –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–∏–º–≤–æ–ª—É
   */
  private advance(): void {
    if (!this.isAtEnd()) {
      this.position++;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
   */
  private previousToken(): string {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
    return this.input[this.position - 1] || '';
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞
   */
  private currentChar(): string {
    if (this.isAtEnd()) return '\0';
    return this.input[this.position] || '\0';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞ –≤–≤–æ–¥–∞
   */
  private isAtEnd(): boolean {
    return this.position >= this.length;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª —Ü–∏—Ñ—Ä–æ–π
   */
  private isDigit(char: string): boolean {
    return char >= '0' && char <= '9';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª –±—É–∫–≤–æ–π
   */
  private isAlpha(char: string): boolean {
    return (char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z');
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
   */
  private createError(message: string): ParseError {
    return {
      message,
      position: this.position,
    };
  }
}
