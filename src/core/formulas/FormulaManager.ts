/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ–æ—Ä–º—É–ª - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞, –¥–≤–∏–∂–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–¥–≤–∏–≥–æ–≤
 */

import { FormulaParser } from './FormulaParser.js';
import { FormulaEngine, FormulaContext, CellValue } from './FormulaEngine.js';
import { FormulaAST, FormulaNode, FormulaUtils } from './FormulaAST.js';

export type { CellValue } from './FormulaEngine.js';

export interface FormulaInfo {
  ast: FormulaAST;
  dependencies: Set<string>; // –°—Å—ã–ª–∫–∏ –Ω–∞ —è—á–µ–π–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "row:col"
  dependents: Set<string>; // –Ø—á–µ–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —ç—Ç–æ–π
}

export class FormulaManager {
  private parser: FormulaParser;
  private engine: FormulaEngine;
  private formulas: Map<string, FormulaInfo> = new Map(); // "row:col" -> FormulaInfo
  private updateFormulaCallback?: (row: number, col: number, formula: string) => void;

  constructor(context: FormulaContext) {
    this.parser = new FormulaParser();
    this.engine = new FormulaEngine(context);
    console.log('üìä FormulaManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª—ã –≤ SparseMatrix
   */
  setUpdateFormulaCallback(callback: (row: number, col: number, formula: string) => void): void {
    this.updateFormulaCallback = callback;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ—Ä–º—É–ª—ã –≤ —è—á–µ–π–∫—É
   */
  setFormula(row: number, col: number, formula: string): void {
    const cellKey = `${row}:${col}`;

    try {
      // –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º—É–ª—É
      const ast = this.parser.parse(formula);

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      const dependencies = this.extractDependencies(ast.root);

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      this.removeDependencies(cellKey);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º—É–ª—É
      this.formulas.set(cellKey, {
        ast,
        dependencies,
        dependents: new Set(),
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      this.addDependencies(cellKey, dependencies);

      console.log(`üìù –§–æ—Ä–º—É–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ —è—á–µ–π–∫—É ${row},${col}: ${formula}`);
      console.log(`üîó –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${Array.from(dependencies).join(', ')}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–æ—Ä–º—É–ª—ã: ${error}`);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã –∏–∑ —è—á–µ–π–∫–∏
   */
  getFormula(row: number, col: number): string | null {
    const cellKey = `${row}:${col}`;
    const formulaInfo = this.formulas.get(cellKey);
    return formulaInfo ? formulaInfo.ast.originalFormula : null;
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã –∏–∑ —è—á–µ–π–∫–∏
   */
  removeFormula(row: number, col: number): void {
    const cellKey = `${row}:${col}`;
    this.removeDependencies(cellKey);
    this.formulas.delete(cellKey);
    console.log(`üóëÔ∏è –§–æ—Ä–º—É–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —è—á–µ–π–∫–∏ ${row},${col}`);
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã –≤ —è—á–µ–π–∫–µ
   */
  evaluateFormula(row: number, col: number): CellValue {
    const cellKey = `${row}:${col}`;
    const formulaInfo = this.formulas.get(cellKey);

    if (!formulaInfo) {
      return { value: null, type: 'empty' };
    }

    try {
      return this.engine.evaluate(formulaInfo.ast);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª—ã –≤ ${row},${col}: ${error}`);
      return { value: `#ERROR: ${error}`, type: 'error' };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–¥–≤–∏–≥–∞ –ø—Ä–∏ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏/—Å—Ç–æ–ª–±—Ü–∞–º–∏
   */
  handleRowInsertion(atRow: number): void {
    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${atRow}`);
    console.log(`üìä –¢–µ–∫—É—â–∏–µ —Ñ–æ—Ä–º—É–ª—ã:`, Array.from(this.formulas.keys()));

    const newFormulas = new Map<string, FormulaInfo>();

    for (const [cellKey, formulaInfo] of this.formulas) {
      const [rowStr, colStr] = cellKey.split(':');
      const row = parseInt(rowStr || '0', 10);
      const col = parseInt(colStr || '0', 10);

      let newRow = row;
      let newCol = col;

      // –°–¥–≤–∏–≥–∞–µ–º —è—á–µ–π–∫–∏ –Ω–∏–∂–µ —Ç–æ—á–∫–∏ –≤—Å—Ç–∞–≤–∫–∏
      if (row >= atRow) {
        newRow = row + 1;
      }

      console.log(`üìä –§–æ—Ä–º—É–ª–∞ ${cellKey} -> ${newRow}:${newCol} (—Å–¥–≤–∏–≥ —Å—Ç—Ä–æ–∫–∏)`);

      // –°–¥–≤–∏–≥–∞–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º—É–ª–µ
      console.log(`üìä –°–¥–≤–∏–≥–∞–µ–º —Ñ–æ—Ä–º—É–ª—É ${cellKey}: ${JSON.stringify(formulaInfo.ast.root)}`);
      const shiftedAST = this.shiftFormulaAST(
        formulaInfo.ast,
        0,
        0,
        atRow,
        undefined,
        undefined,
        undefined
      );
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–≤–∏–≥–∞: ${JSON.stringify(shiftedAST.root)}`);

      const newCellKey = `${newRow}:${newCol}`;

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º—É–ª—ã –≤ SparseMatrix
      const newFormulaString = this.formatFormula(shiftedAST.root);
      console.log(`üîß –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—É: ${cellKey} -> ${newCellKey}: ${newFormulaString}`);

      // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª—ã –≤ SparseMatrix
      if (this.updateFormulaCallback) {
        this.updateFormulaCallback(newRow, newCol, `=${newFormulaString}`);
      }

      newFormulas.set(newCellKey, {
        ast: shiftedAST,
        dependencies: this.extractDependencies(shiftedAST.root),
        dependents: new Set(),
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É —Ñ–æ—Ä–º—É–ª
    this.formulas = newFormulas;
    this.rebuildDependencies();

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—Å—Ç–∞–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏: ${this.formulas.size} —Ñ–æ—Ä–º—É–ª –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º—É–ª—ã
    this.recalculateAllFormulas();
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
   */
  handleRowDeletion(atRow: number): void {
    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${atRow}`);

    const newFormulas = new Map<string, FormulaInfo>();

    for (const [cellKey, formulaInfo] of this.formulas) {
      const [rowStr, colStr] = cellKey.split(':');
      const row = parseInt(rowStr || '0', 10);
      const col = parseInt(colStr || '0', 10);

      // –£–¥–∞–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—É –∏–∑ —É–¥–∞–ª—è–µ–º–æ–π —Å—Ç—Ä–æ–∫–∏
      if (row === atRow) {
        continue;
      }

      let newRow = row;
      let newCol = col;

      // –°–¥–≤–∏–≥–∞–µ–º —è—á–µ–π–∫–∏ –≤—ã—à–µ —Ç–æ—á–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
      if (row > atRow) {
        newRow = row - 1;
      }

      // –°–¥–≤–∏–≥–∞–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º—É–ª–µ
      const shiftedAST = this.shiftFormulaAST(
        formulaInfo.ast,
        0,
        0,
        undefined,
        undefined,
        atRow,
        undefined
      );

      const newCellKey = `${newRow}:${newCol}`;

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º—É–ª—ã –≤ SparseMatrix
      const newFormulaString = this.formatFormula(shiftedAST.root);
      console.log(`üîß –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—É: ${cellKey} -> ${newCellKey}: ${newFormulaString}`);

      // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª—ã –≤ SparseMatrix
      if (this.updateFormulaCallback) {
        this.updateFormulaCallback(newRow, newCol, `=${newFormulaString}`);
      }

      newFormulas.set(newCellKey, {
        ast: shiftedAST,
        dependencies: this.extractDependencies(shiftedAST.root),
        dependents: new Set(),
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É —Ñ–æ—Ä–º—É–ª
    this.formulas = newFormulas;
    this.rebuildDependencies();

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏: ${this.formulas.size} —Ñ–æ—Ä–º—É–ª –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º—É–ª—ã
    this.recalculateAllFormulas();
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–∞
   */
  handleColumnInsertion(atCol: number): void {
    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${atCol}`);
    console.log(`üìä –¢–µ–∫—É—â–∏–µ —Ñ–æ—Ä–º—É–ª—ã:`, Array.from(this.formulas.keys()));

    const newFormulas = new Map<string, FormulaInfo>();

    for (const [cellKey, formulaInfo] of this.formulas) {
      console.log(`üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—É: ${cellKey}`);
      const [rowStr, colStr] = cellKey.split(':');
      const row = parseInt(rowStr || '0', 10);
      const col = parseInt(colStr || '0', 10);

      let newRow = row;
      let newCol = col;

      // –°–¥–≤–∏–≥–∞–µ–º —è—á–µ–π–∫–∏ –ø—Ä–∞–≤–µ–µ —Ç–æ—á–∫–∏ –≤—Å—Ç–∞–≤–∫–∏
      if (col >= atCol) {
        newCol = col + 1;
        console.log(`üîß –°–¥–≤–∏–≥–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü: ${col} -> ${newCol}`);
      }

      // –°–¥–≤–∏–≥–∞–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º—É–ª–µ
      console.log(`üìä –°–¥–≤–∏–≥–∞–µ–º —Ñ–æ—Ä–º—É–ª—É ${cellKey}: ${JSON.stringify(formulaInfo.ast.root)}`);
      const shiftedAST = this.shiftFormulaAST(
        formulaInfo.ast,
        0,
        0,
        undefined,
        atCol,
        undefined,
        undefined
      );
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–≤–∏–≥–∞: ${JSON.stringify(shiftedAST.root)}`);

      const newCellKey = `${newRow}:${newCol}`;

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º—É–ª—ã –≤ SparseMatrix
      const newFormulaString = this.formatFormula(shiftedAST.root);
      console.log(`üîß –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—É: ${cellKey} -> ${newCellKey}: ${newFormulaString}`);

      // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª—ã –≤ SparseMatrix
      if (this.updateFormulaCallback) {
        this.updateFormulaCallback(newRow, newCol, `=${newFormulaString}`);
      }

      newFormulas.set(newCellKey, {
        ast: shiftedAST,
        dependencies: this.extractDependencies(shiftedAST.root),
        dependents: new Set(),
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É —Ñ–æ—Ä–º—É–ª
    this.formulas = newFormulas;
    this.rebuildDependencies();

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—Å—Ç–∞–≤–∫–∞ —Å—Ç–æ–ª–±—Ü–∞: ${this.formulas.size} —Ñ–æ—Ä–º—É–ª –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º—É–ª—ã
    this.recalculateAllFormulas();
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞
   */
  handleColumnDeletion(atCol: number): void {
    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${atCol}`);

    const newFormulas = new Map<string, FormulaInfo>();

    for (const [cellKey, formulaInfo] of this.formulas) {
      const [rowStr, colStr] = cellKey.split(':');
      const row = parseInt(rowStr || '0', 10);
      const col = parseInt(colStr || '0', 10);

      // –£–¥–∞–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—É –∏–∑ —É–¥–∞–ª—è–µ–º–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
      if (col === atCol) {
        continue;
      }

      let newRow = row;
      let newCol = col;

      // –°–¥–≤–∏–≥–∞–µ–º —è—á–µ–π–∫–∏ –ª–µ–≤–µ–µ —Ç–æ—á–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
      if (col > atCol) {
        newCol = col - 1;
      }

      // –°–¥–≤–∏–≥–∞–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º—É–ª–µ
      const shiftedAST = this.shiftFormulaAST(
        formulaInfo.ast,
        0,
        0,
        undefined,
        undefined,
        undefined,
        atCol
      );

      const newCellKey = `${newRow}:${newCol}`;

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º—É–ª—ã –≤ SparseMatrix
      const newFormulaString = this.formatFormula(shiftedAST.root);
      console.log(`üîß –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—É: ${cellKey} -> ${newCellKey}: ${newFormulaString}`);

      // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª—ã –≤ SparseMatrix
      if (this.updateFormulaCallback) {
        this.updateFormulaCallback(newRow, newCol, `=${newFormulaString}`);
      }

      newFormulas.set(newCellKey, {
        ast: shiftedAST,
        dependencies: this.extractDependencies(shiftedAST.root),
        dependents: new Set(),
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É —Ñ–æ—Ä–º—É–ª
    this.formulas = newFormulas;
    this.rebuildDependencies();

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞: ${this.formulas.size} —Ñ–æ—Ä–º—É–ª –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º—É–ª—ã
    this.recalculateAllFormulas();
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AST –≤ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º—É–ª—ã
   */
  private formatFormula(node: FormulaNode): string {
    switch (node.type) {
      case 'number':
        return node.value.toString();
      case 'string':
        return `"${node.value}"`;
      case 'cell':
        return FormulaUtils.formatCellReference(node);
      case 'range':
        return FormulaUtils.formatCellRange(node);
      case 'function':
        const args = node.args.map(arg => this.formatFormula(arg)).join(',');
        return `${node.name.toUpperCase()}(${args})`;
      case 'binary':
        const left = this.formatFormula(node.left);
        const right = this.formatFormula(node.right);
        return `${left}${node.operator}${right}`;
      case 'unary':
        return `${node.operator}${this.formatFormula(node.operand)}`;
      default:
        return '';
    }
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–æ—Ä–º—É–ª
   */
  private recalculateAllFormulas(): void {
    console.log(`üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ ${this.formulas.size} —Ñ–æ—Ä–º—É–ª`);

    for (const [cellKey] of this.formulas) {
      try {
        const [rowStr, colStr] = cellKey.split(':');
        const row = parseInt(rowStr || '0', 10);
        const col = parseInt(colStr || '0', 10);
        const result = this.evaluateFormula(row, col);
        console.log(`üîÑ –§–æ—Ä–º—É–ª–∞ ${cellKey} –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞: ${JSON.stringify(result)}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ñ–æ—Ä–º—É–ª—ã ${cellKey}:`, error);
      }
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ AST
   */
  private extractDependencies(node: FormulaNode): Set<string> {
    const dependencies = new Set<string>();

    const traverse = (n: FormulaNode) => {
      switch (n.type) {
        case 'cell':
          dependencies.add(`${n.row}:${n.col}`);
          break;
        case 'range':
          // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
          for (let row = n.startRow; row <= n.endRow; row++) {
            for (let col = n.startCol; col <= n.endCol; col++) {
              dependencies.add(`${row}:${col}`);
            }
          }
          break;
        case 'function':
          n.args.forEach(traverse);
          break;
        case 'binary':
          traverse(n.left);
          traverse(n.right);
          break;
        case 'unary':
          traverse(n.operand);
          break;
      }
    };

    traverse(node);
    return dependencies;
  }

  /**
   * –°–¥–≤–∏–≥ AST —Ñ–æ—Ä–º—É–ª—ã
   */
  private shiftFormulaAST(
    ast: FormulaAST,
    rowOffset: number,
    colOffset: number,
    insertRow?: number,
    insertCol?: number,
    deleteRow?: number,
    deleteCol?: number
  ): FormulaAST {
    const shiftedRoot = this.shiftNode(
      ast.root,
      rowOffset,
      colOffset,
      insertRow,
      insertCol,
      deleteRow,
      deleteCol
    );

    return {
      ...ast,
      root: shiftedRoot,
    };
  }

  /**
   * –°–¥–≤–∏–≥ —É–∑–ª–∞ AST
   */
  private shiftNode(
    node: FormulaNode,
    rowOffset: number,
    colOffset: number,
    insertRow?: number,
    insertCol?: number,
    deleteRow?: number,
    deleteCol?: number
  ): FormulaNode {
    console.log(
      `üîß shiftNode: type=${node.type}, rowOffset=${rowOffset}, colOffset=${colOffset}, insertCol=${insertCol}`
    );

    switch (node.type) {
      case 'cell':
        const shiftedCell = FormulaUtils.shiftCellReference(
          node,
          rowOffset,
          colOffset,
          insertRow,
          insertCol,
          deleteRow,
          deleteCol
        );
        console.log(
          `üîß shiftNode cell: ${node.row},${node.col} -> ${shiftedCell.row},${shiftedCell.col}`
        );
        return shiftedCell;

      case 'range':
        const shiftedRange = FormulaUtils.shiftCellRange(
          node,
          rowOffset,
          colOffset,
          insertRow,
          insertCol,
          deleteRow,
          deleteCol
        );
        console.log(
          `üîß shiftNode range: ${node.startRow},${node.startCol}:${node.endRow},${node.endCol} -> ${shiftedRange.startRow},${shiftedRange.startCol}:${shiftedRange.endRow},${shiftedRange.endCol}`
        );
        return shiftedRange;

      case 'function':
        return {
          ...node,
          args: node.args.map(arg =>
            this.shiftNode(arg, rowOffset, colOffset, insertRow, insertCol, deleteRow, deleteCol)
          ),
        };

      case 'binary':
        return {
          ...node,
          left: this.shiftNode(
            node.left,
            rowOffset,
            colOffset,
            insertRow,
            insertCol,
            deleteRow,
            deleteCol
          ),
          right: this.shiftNode(
            node.right,
            rowOffset,
            colOffset,
            insertRow,
            insertCol,
            deleteRow,
            deleteCol
          ),
        };

      case 'unary':
        return {
          ...node,
          operand: this.shiftNode(
            node.operand,
            rowOffset,
            colOffset,
            insertRow,
            insertCol,
            deleteRow,
            deleteCol
          ),
        };

      default:
        return node; // –ß–∏—Å–ª–∞, —Å—Ç—Ä–æ–∫–∏ –∏ —Ç.–¥. –Ω–µ —Å–¥–≤–∏–≥–∞—é—Ç—Å—è
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
   */
  private addDependencies(cellKey: string, dependencies: Set<string>): void {
    for (const dep of dependencies) {
      const depInfo = this.formulas.get(dep);
      if (depInfo) {
        depInfo.dependents.add(cellKey);
      }
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
   */
  private removeDependencies(cellKey: string): void {
    const formulaInfo = this.formulas.get(cellKey);
    if (formulaInfo) {
      for (const dep of formulaInfo.dependencies) {
        const depInfo = this.formulas.get(dep);
        if (depInfo) {
          depInfo.dependents.delete(cellKey);
        }
      }
    }
  }

  /**
   * –ü–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
   */
  private rebuildDependencies(): void {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    for (const formulaInfo of this.formulas.values()) {
      formulaInfo.dependents.clear();
    }

    // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    for (const [cellKey, formulaInfo] of this.formulas) {
      this.addDependencies(cellKey, formulaInfo.dependencies);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  getStats(): {
    totalFormulas: number;
    formulasByType: Record<string, number>;
    totalDependencies: number;
  } {
    const formulasByType: Record<string, number> = {};
    let totalDependencies = 0;

    for (const formulaInfo of this.formulas.values()) {
      const rootType = formulaInfo.ast.root.type;
      formulasByType[rootType] = (formulasByType[rootType] || 0) + 1;
      totalDependencies += formulaInfo.dependencies.size;
    }

    return {
      totalFormulas: this.formulas.size,
      formulasByType,
      totalDependencies,
    };
  }
}
