/**
 * –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è Undo/Redo —Å–∏—Å—Ç–µ–º—ã
 */

export interface Operation {
  id: string;
  type: 'insert_row' | 'delete_row' | 'insert_column' | 'delete_column' | 'set_cell' | 'clear_cell';
  timestamp: number;
  data: any;
  description: string;
}

export interface InsertRowOperation extends Operation {
  type: 'insert_row';
  data: {
    atRow: number;
    affectedCells: Array<{ row: number; col: number; value: any }>;
  };
}

export interface DeleteRowOperation extends Operation {
  type: 'delete_row';
  data: {
    atRow: number;
    deletedCells: Array<{ row: number; col: number; value: any }>;
  };
}

export interface InsertColumnOperation extends Operation {
  type: 'insert_column';
  data: {
    atCol: number;
    affectedCells: Array<{ row: number; col: number; value: any }>;
  };
}

export interface DeleteColumnOperation extends Operation {
  type: 'delete_column';
  data: {
    atCol: number;
    deletedCells: Array<{ row: number; col: number; value: any }>;
  };
}

export interface SetCellOperation extends Operation {
  type: 'set_cell';
  data: {
    row: number;
    col: number;
    oldValue: any;
    newValue: any;
  };
}

export interface ClearCellOperation extends Operation {
  type: 'clear_cell';
  data: {
    row: number;
    col: number;
    oldValue: any;
  };
}

export type AnyOperation =
  | InsertRowOperation
  | DeleteRowOperation
  | InsertColumnOperation
  | DeleteColumnOperation
  | SetCellOperation
  | ClearCellOperation;

export class OperationHistory {
  private history: AnyOperation[] = [];
  private currentIndex: number = -1;
  private maxHistorySize: number = 100; // –ú–∞–∫—Å–∏–º—É–º 100 –æ–ø–µ—Ä–∞—Ü–∏–π

  constructor(maxHistorySize: number = 100) {
    this.maxHistorySize = maxHistorySize;
    console.log(`üìö OperationHistory –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º: ${maxHistorySize}`);
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
   */
  addOperation(operation: Omit<AnyOperation, 'id' | 'timestamp'>): void {
    const fullOperation = {
      ...operation,
      id: this.generateOperationId(),
      timestamp: Date.now(),
    } as AnyOperation;

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (this.currentIndex < this.history.length - 1) {
      this.history = this.history.slice(0, this.currentIndex + 1);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    this.history.push(fullOperation);
    this.currentIndex = this.history.length - 1;

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    this.limitHistorySize();

    console.log(`üìù –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${fullOperation.type} - ${fullOperation.description}`);
  }

  /**
   * –û—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  undo(): AnyOperation | null {
    if (this.currentIndex < 0 || this.currentIndex >= this.history.length) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã');
      return null;
    }

    const operation = this.history[this.currentIndex];
    if (!operation) {
      console.log('‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return null;
    }

    this.currentIndex--;

    console.log(`‚Ü∂ –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${operation.type} - ${operation.description}`);
    return operation;
  }

  /**
   * –ü–æ–≤—Ç–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  redo(): AnyOperation | null {
    if (this.currentIndex >= this.history.length - 1) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞');
      return null;
    }

    this.currentIndex++;
    const operation = this.history[this.currentIndex];
    if (!operation) {
      console.log('‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return null;
    }

    console.log(`‚Ü∑ –ü–æ–≤—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏: ${operation.type} - ${operation.description}`);
    return operation;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã
   */
  canUndo(): boolean {
    return this.currentIndex >= 0;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–∞
   */
  canRedo(): boolean {
    return this.currentIndex < this.history.length - 1;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
   */
  getState(): {
    canUndo: boolean;
    canRedo: boolean;
    currentIndex: number;
    totalOperations: number;
    lastOperation: AnyOperation | null;
  } {
    const lastOperation = this.currentIndex >= 0 ? this.history[this.currentIndex] || null : null;
    return {
      canUndo: this.canUndo(),
      canRedo: this.canRedo(),
      currentIndex: this.currentIndex,
      totalOperations: this.history.length,
      lastOperation: lastOperation,
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
   */
  clear(): void {
    this.history = [];
    this.currentIndex = -1;
    console.log('üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –æ—á–∏—â–µ–Ω–∞');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  getStats(): {
    totalOperations: number;
    currentIndex: number;
    memoryUsage: string;
    operationsByType: Record<string, number>;
  } {
    const operationsByType: Record<string, number> = {};

    for (const operation of this.history) {
      operationsByType[operation.type] = (operationsByType[operation.type] || 0) + 1;
    }

    // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    const memoryUsage = JSON.stringify(this.history).length;
    const memoryUsageKB = (memoryUsage / 1024).toFixed(2);

    return {
      totalOperations: this.history.length,
      currentIndex: this.currentIndex,
      memoryUsage: `${memoryUsageKB} KB`,
      operationsByType,
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  private generateOperationId(): string {
    return `op_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;
  }

  /**
   * –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
   */
  private limitHistorySize(): void {
    if (this.history.length > this.maxHistorySize) {
      const removedCount = this.history.length - this.maxHistorySize;
      this.history = this.history.slice(removedCount);
      this.currentIndex = this.history.length - 1;

      console.log(`üìö –ò—Å—Ç–æ—Ä–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ ${removedCount} —Å—Ç–∞—Ä—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π`);
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ JSON
   */
  exportToJSON(): string {
    return JSON.stringify(
      {
        history: this.history,
        currentIndex: this.currentIndex,
        maxHistorySize: this.maxHistorySize,
        exportedAt: new Date().toISOString(),
      },
      null,
      2
    );
  }

  /**
   * –ò–º–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ JSON
   */
  importFromJSON(json: string): void {
    try {
      const data = JSON.parse(json);

      if (data.history && Array.isArray(data.history)) {
        this.history = data.history;
        this.currentIndex = data.currentIndex || -1;
        this.maxHistorySize = data.maxHistorySize || 100;

        console.log(`üìö –ò—Å—Ç–æ—Ä–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: ${this.history.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);
      } else {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π');
    }
  }
}
